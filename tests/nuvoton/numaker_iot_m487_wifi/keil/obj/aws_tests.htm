<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\aws_tests.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\aws_tests.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Feb 11 14:13:31 2019
<BR><P>
<H3>Maximum Stack Usage =       1680 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
eckey_sign_wrap &rArr; ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">NMI_Handler</a><BR>
 <LI><a href="#[1d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">MemManage_Handler</a><BR>
 <LI><a href="#[1e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">BusFault_Handler</a><BR>
 <LI><a href="#[1f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">UsageFault_Handler</a><BR>
 <LI><a href="#[21]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">DebugMon_Handler</a><BR>
 <LI><a href="#[120]">vApplicationMallocFailedHook</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[112]">vLoggingPrintf</a><BR>
 <LI><a href="#[364]">mbedtls_cipher_update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[366]">mbedtls_gcm_update</a><BR>
 <LI><a href="#[29]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[50]">ACMP01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4e]">ADC00_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4f]">ADC01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[51]">ADC02_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[52]">ADC03_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[24]">BOD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6d]">BPWM0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6e]">BPWM1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3c]">BRAKE0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[40]">BRAKE1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[8b]">BUFFERPOOL_GetFreeBuffer</a> from aws_bufferpool_static_thread_safe.o(.text) referenced from aws_mqtt_agent.o(.text)
 <LI><a href="#[8c]">BUFFERPOOL_ReturnBuffer</a> from aws_bufferpool_static_thread_safe.o(.text) referenced from aws_mqtt_agent.o(.text)
 <LI><a href="#[1e]">BusFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5a]">CAN0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5b]">CAN1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[28]">CKFAIL_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[66]">CRYPTO_IRQHandler</a> from entropy_hardware_poll.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5]">C_CloseSession</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[6]">C_CreateObject</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[7]">C_DestroyObject</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[e]">C_DigestFinal</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[c]">C_DigestInit</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[d]">C_DigestUpdate</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[1]">C_Finalize</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[a]">C_FindObjects</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[b]">C_FindObjectsFinal</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[9]">C_FindObjectsInit</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[13]">C_GenerateKeyPair</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[14]">C_GenerateRandom</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[8]">C_GetAttributeValue</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[2]">C_GetFunctionList</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[2]">C_GetFunctionList</a> from aws_pkcs11_mbedtls.o(.text) referenced from aws_tls.o(.text)
 <LI><a href="#[3]">C_GetSlotList</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[0]">C_Initialize</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[4]">C_OpenSession</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[10]">C_Sign</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[f]">C_SignInit</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[12]">C_Verify</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[11]">C_VerifyInit</a> from aws_pkcs11_mbedtls.o(.text) referenced 2 times from aws_pkcs11_mbedtls.o(.data)
 <LI><a href="#[4d]">DAC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[21]">DebugMon_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[29]">Default_Handler</a> from startup_m480.o(.text) referenced 9 times from startup_m480.o(RESET)
 <LI><a href="#[73]">ECAP0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[74]">ECAP1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[78]">EHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2e]">EINT0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2f]">EINT1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[30]">EINT2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[31]">EINT3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[32]">EINT4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[33]">EINT5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[68]">EINT6_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[76]">EINT7_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[63]">EMAC_RX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[62]">EMAC_TX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3d]">EPWM0P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3e]">EPWM0P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3f]">EPWM0P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[41]">EPWM1P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[42]">EPWM1P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[43]">EPWM1P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[34]">GPA_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[35]">GPB_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[36]">GPC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[37]">GPD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[38]">GPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[39]">GPF_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[67]">GPG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[75]">GPH_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1c]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7b]">Hard_Fault_Handler</a> from retarget.o(.text) referenced from retarget.o(.emb_text)
 <LI><a href="#[4a]">I2C0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4b]">I2C1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[70]">I2C2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[64]">I2S0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[25]">IRC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1d]">MemManage_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1b]">NMI_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[58]">OHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[65]">OPA0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4c]">PDMA_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[26]">PWRWU_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[22]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_m480.o(RESET)
 <LI><a href="#[71]">QEI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[72]">QEI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3a]">QSPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[27]">RAMPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2a]">RTC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1a]">Reset_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5c]">SC0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5d]">SC1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5e]">SC2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[60]">SDH0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[77]">SDH1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3b]">SPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[55]">SPI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[56]">SPI2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5f]">SPI3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6f]">SPIM_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[20]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_m480.o(RESET)
 <LI><a href="#[23]">SysTick_Handler</a> from port.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7c]">SystemInit</a> from system_m480.o(.text) referenced from startup_m480.o(.text)
 <LI><a href="#[2b]">TAMPER_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[23f]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseInvalidParams_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[23c]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseWithoutReceiving_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[20f]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_Close_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[222]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidAddressLength_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[225]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidParams_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[1fd]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlockingConnect_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[218]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlocking_Test_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[20c]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_ByteByByte_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[203]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_Invalid_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[233]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_On_Unconnected_Socket_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[209]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_SendRecv_VaryLength_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[206]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_Send_Invalid_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[1f4]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[215]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_InvalidParams_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[21b]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_RCVTIMEO_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[228]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SERVER_NAME_INDICATION_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[276]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SNDTIMEO_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[22b]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_TRUSTED_SERVER_CERTIFICATE_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[239]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownInvalidParams_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[236]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownWithoutReceiving_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[212]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_Shutdown_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[200]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_SockEventHandler_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[278]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_Socket_InvalidTooManySockets_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[21f]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[230]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_SameSocketDifferentTasks_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[1fa]">TEST_Full_TCP_AFQP_SECURE_SOCKETS_TwoSecureConnections_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[270]">TEST_Full_TCP_AFQP_SOCKETS_CloseInvalidParams_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[26e]">TEST_Full_TCP_AFQP_SOCKETS_CloseWithoutReceiving_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[253]">TEST_Full_TCP_AFQP_SOCKETS_Close_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[262]">TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidAddressLength_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[264]">TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidParams_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[259]">TEST_Full_TCP_AFQP_SOCKETS_NonBlocking_Test_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[251]">TEST_Full_TCP_AFQP_SOCKETS_Recv_ByteByByte_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[245]">TEST_Full_TCP_AFQP_SOCKETS_Recv_Invalid_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[268]">TEST_Full_TCP_AFQP_SOCKETS_Recv_On_Unconnected_Socket_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[24f]">TEST_Full_TCP_AFQP_SOCKETS_SendRecv_VaryLength_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[247]">TEST_Full_TCP_AFQP_SOCKETS_Send_Invalid_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[257]">TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_InvalidParams_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[25b]">TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_RCVTIMEO_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[274]">TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_SNDTIMEO_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[26c]">TEST_Full_TCP_AFQP_SOCKETS_ShutdownInvalidParams_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[26a]">TEST_Full_TCP_AFQP_SOCKETS_ShutdownWithoutReceiving_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[255]">TEST_Full_TCP_AFQP_SOCKETS_Shutdown_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[24a]">TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidInputParams_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[24d]">TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidTooManySockets_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[25e]">TEST_Full_TCP_AFQP_SOCKETS_Socket_TCP_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[260]">TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[266]">TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_SameSocketDifferentTasks_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[243]">TEST_Full_TCP_AFQP_SOCKETS_htons_HappyCase_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[241]">TEST_Full_TCP_AFQP_SOCKETS_inet_addr_quick_HappyCase_</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[84]">TEST_Full_TCP_SETUP</a> from aws_test_tcp.o(.text) referenced 15 times from aws_test_tcp.o(.text)
 <LI><a href="#[83]">TEST_Full_TCP_TEAR_DOWN</a> from aws_test_tcp.o(.text) referenced 15 times from aws_test_tcp.o(.text)
 <LI><a href="#[7e]">TEST_RUNNER_RunTests_task</a> from aws_test_runner.o(.text) referenced from main.o(.text)
 <LI><a href="#[44]">TMR0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[45]">TMR1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[46]">TMR2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[47]">TMR3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[48]">UART0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[49]">UART1_IRQHandler</a> from esp8266_wifi.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[53]">UART2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[54]">UART3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[69]">UART4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6a]">UART5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[61]">USBD20_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[57]">USBD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[79]">USBOTG20_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[59]">USBOTG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6b]">USCI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6c]">USCI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1f]">UsageFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2c]">WDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2d]">WWDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m480.o(.text)
 <LI><a href="#[ad]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[ae]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[ac]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[b1]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[b1]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[b2]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[94]">add_one_and_zeros_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[92]">add_pkcs_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[96]">add_zeros_and_len_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[98]">add_zeros_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[b4]">aes_crypt_cbc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[b5]">aes_crypt_cfb128_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[b6]">aes_crypt_ctr_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[b3]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[b9]">aes_ctx_alloc</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[ba]">aes_ctx_free</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[b8]">aes_setkey_dec_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[b7]">aes_setkey_enc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[2dc]">aws_mbedtls_mutex_free</a> from aws_pkcs11_mbedtls.o(.text) referenced from aws_pkcs11_mbedtls.o(.text)
 <LI><a href="#[2db]">aws_mbedtls_mutex_init</a> from aws_pkcs11_mbedtls.o(.text) referenced from aws_pkcs11_mbedtls.o(.text)
 <LI><a href="#[2dd]">aws_mbedtls_mutex_lock</a> from aws_pkcs11_mbedtls.o(.text) referenced from aws_pkcs11_mbedtls.o(.text)
 <LI><a href="#[2de]">aws_mbedtls_mutex_unlock</a> from aws_pkcs11_mbedtls.o(.text) referenced from aws_pkcs11_mbedtls.o(.text)
 <LI><a href="#[15]">calloc</a> from calloc.o(.text) referenced 2 times from platform.o(.data)
 <LI><a href="#[9b]">ctr_drbg_self_test_entropy</a> from ctr_drbg.o(.text) referenced from ctr_drbg.o(.text)
 <LI><a href="#[e6]">ecdsa_alloc_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[e3]">ecdsa_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[e7]">ecdsa_free_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[e5]">ecdsa_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[e4]">ecdsa_verify_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[df]">eckey_alloc_wrap</a> from pk_wrap.o(.text) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[db]">eckey_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[de]">eckey_check_pair</a> from pk_wrap.o(.text) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[e1]">eckey_debug</a> from pk_wrap.o(.text) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[e0]">eckey_free_wrap</a> from pk_wrap.o(.text) referenced 2 times from pk_wrap.o(.constdata)
 <LI><a href="#[da]">eckey_get_bitlen</a> from pk_wrap.o(.text) referenced 3 times from pk_wrap.o(.constdata)
 <LI><a href="#[dd]">eckey_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[dc]">eckey_verify_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[e2]">eckeydh_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[9c]">ecp_mod_p256</a> from ecp_curves.o(.text) referenced from ecp_curves.o(.text)
 <LI><a href="#[9e]">entropy_dummy_source</a> from entropy.o(.text) referenced from entropy.o(.text)
 <LI><a href="#[b0]">fputc</a> from retarget.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[16]">free</a> from malloc.o(i.free) referenced 2 times from platform.o(.data)
 <LI><a href="#[bb]">gcm_aes_setkey_wrap</a> from cipher_wrap.o(.text) referenced 2 times from cipher_wrap.o(.constdata)
 <LI><a href="#[bc]">gcm_ctx_alloc</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[bd]">gcm_ctx_free</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[9a]">get_no_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[95]">get_one_and_zeros_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[93]">get_pkcs_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[97]">get_zeros_and_len_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[99]">get_zeros_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[af]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[7a]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[91]">mbedtls_ctr_drbg_random</a> from ctr_drbg.o(.text) referenced from aws_pkcs11_mbedtls.o(.text)
 <LI><a href="#[90]">mbedtls_entropy_func</a> from entropy.o(.text) referenced from aws_pkcs11_mbedtls.o(.text)
 <LI><a href="#[9d]">mbedtls_hardware_poll</a> from entropy_hardware_poll.o(.text) referenced from entropy.o(.text)
 <LI><a href="#[c1]">mbedtls_sha1_ret</a> from sha1.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[17]">memset</a> from memseta.o(.text) referenced 2 times from platform_util.o(.data)
 <LI><a href="#[9f]">myrand</a> from rsa.o(.text) referenced from rsa.o(.text)
 <LI><a href="#[8f]">prvCalloc</a> from aws_crypto.o(.text) referenced from aws_crypto.o(.text)
 <LI><a href="#[a6]">prvCheckCertificate</a> from aws_tls.o(.text) referenced from aws_tls.o(.text)
 <LI><a href="#[86]">prvEchoClientTxTask</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[a7]">prvGenerateRandomBytes</a> from aws_tls.o(.text) referenced from aws_tls.o(.text)
 <LI><a href="#[7f]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[82]">prvLoggingTask</a> from aws_logging_task_dynamic_buffers.o(.text) referenced from aws_logging_task_dynamic_buffers.o(.text)
 <LI><a href="#[87]">prvMQTTClientSocketWakeupCallback</a> from aws_mqtt_agent.o(.text) referenced from aws_mqtt_agent.o(.text)
 <LI><a href="#[88]">prvMQTTEventCallback</a> from aws_mqtt_agent.o(.text) referenced from aws_mqtt_agent.o(.text)
 <LI><a href="#[8a]">prvMQTTGetTicks</a> from aws_mqtt_agent.o(.text) referenced from aws_mqtt_agent.o(.text)
 <LI><a href="#[89]">prvMQTTSendCallback</a> from aws_mqtt_agent.o(.text) referenced from aws_mqtt_agent.o(.text)
 <LI><a href="#[8d]">prvMQTTTask</a> from aws_mqtt_agent.o(.text) referenced from aws_mqtt_agent.o(.text)
 <LI><a href="#[a8]">prvNetworkRecv</a> from aws_tls.o(.text) referenced 2 times from aws_tls.o(.text)
 <LI><a href="#[a9]">prvNetworkSend</a> from aws_tls.o(.text) referenced 2 times from aws_tls.o(.text)
 <LI><a href="#[a5]">prvPrivateKeySigningCallback</a> from aws_tls.o(.text) referenced from aws_tls.o(.text)
 <LI><a href="#[81]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
 <LI><a href="#[85]">prvThreadSafeDifferentSocketsDifferentTasks</a> from aws_test_tcp.o(.text) referenced from aws_test_tcp.o(.text)
 <LI><a href="#[80]">prvTimerTask</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[d7]">rsa_alloc_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[ed]">rsa_alt_alloc_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[e9]">rsa_alt_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[ec]">rsa_alt_check_pair</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[eb]">rsa_alt_decrypt_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[ee]">rsa_alt_free_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[e8]">rsa_alt_get_bitlen</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[ea]">rsa_alt_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[d1]">rsa_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[d6]">rsa_check_pair_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[d9]">rsa_debug</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[d4]">rsa_decrypt_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[d5]">rsa_encrypt_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[d8]">rsa_free_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[d0]">rsa_get_bitlen</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[d3]">rsa_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[d2]">rsa_verify_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[c4]">sha1_clone_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c2]">sha1_ctx_alloc</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c3]">sha1_ctx_free</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c0]">sha1_finish_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c5]">sha1_process_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[be]">sha1_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[bf]">sha1_update_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[cc]">sha224_clone_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[ca]">sha224_ctx_alloc</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[cb]">sha224_ctx_free</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[c8]">sha224_finish_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[cd]">sha224_process_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[c6]">sha224_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[c7]">sha224_update_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[c9]">sha224_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[ce]">sha256_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[cf]">sha256_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[a2]">ssl_calc_finished_tls_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[a1]">ssl_calc_verify_tls_sha256</a> from ssl_tls.o(.text) referenced 2 times from ssl_tls.o(.text)
 <LI><a href="#[a3]">ssl_update_checksum_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[a4]">ssl_update_checksum_start</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[18]">threading_mutex_dummy</a> from threading.o(.text) referenced 4 times from threading.o(.data)
 <LI><a href="#[19]">threading_mutex_fail</a> from threading.o(.text) referenced 4 times from threading.o(.data)
 <LI><a href="#[a0]">tls_prf_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[8e]">vPortFree</a> from heap_4.o(.text) referenced from aws_crypto.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[581]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[f8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[575]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[582]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[583]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[584]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[585]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[586]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[20]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1a1]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1a0]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[22]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[1c]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, system_m480.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>

<P><STRONG><a name="[7c]"></a>SystemInit</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, system_m480.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>Reset_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ADC00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ADC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ADC02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ADC03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>EHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>EMAC_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>EMAC_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EPWM0P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EPWM0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EPWM0P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EPWM1P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EPWM1P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EPWM1P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OPA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RAMPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SDH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SDH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SPIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USBD20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>USBOTG20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, entropy_hardware_poll.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>mbedtls_hardware_poll</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, entropy_hardware_poll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_hardware_poll &rArr; trng_get &rArr; PRNG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test_gather
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entropy.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>numaker_ulRand</STRONG> (Thumb, 16 bytes, Stack size 40 bytes, entropy_hardware_poll.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
</UL>

<P><STRONG><a name="[7a]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; prvMiscInitialization &rArr; xLoggingTaskInitialize &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMiscInitialization
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[118]"></a>vApplicationDaemonTaskStartupHook</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = vApplicationDaemonTaskStartupHook &rArr; prvWifiConnect &rArr; WIFI_ConnectAP &rArr; ESP_WIFI_Connect &rArr; ESP_WIFI_Reset &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWifiConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[587]"></a>vApplicationIPNetworkEventHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>vAssertCalled</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>

<P><STRONG><a name="[173]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[194]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[11d]"></a>pcApplicationHostnameHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xApplicationDNSQueryHook
</UL>

<P><STRONG><a name="[11c]"></a>xApplicationDNSQueryHook</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcApplicationHostnameHook
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[11f]"></a>vApplicationIdleHook</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vApplicationIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[120]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = vApplicationMallocFailedHook &rArr;  vLoggingPrintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetMinimumEverFreeHeapSize
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[16d]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[166]"></a>vApplicationTickHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[126]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[15e]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[15b]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[168]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[163]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[122]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[129]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Init
</UL>

<P><STRONG><a name="[12a]"></a>xQueueGenericCreate</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLoggingTaskInitialize
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
</UL>

<P><STRONG><a name="[131]"></a>xQueueGenericSend</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_On
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetIP
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrint
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_unlock
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTClientSocketWakeupCallback
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Scan
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Reset
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Ping
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_IsConnected
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetMAC
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetHostIP
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Disconnect
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_GetHostByName
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkRecv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkSend
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsValidSocket
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnSocket
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFreeSocket
</UL>

<P><STRONG><a name="[139]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Init
</UL>

<P><STRONG><a name="[13a]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_On
</UL>

<P><STRONG><a name="[13b]"></a>xQueueGetMutexHolder</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[13c]"></a>xQueueGetMutexHolderFromISR</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[13d]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[140]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetIP
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_lock
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Scan
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Reset
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Ping
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_IsConnected
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetMAC
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetHostIP
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Disconnect
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_GetHostByName
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkRecv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkSend
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsValidSocket
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnSocket
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFreeSocket
</UL>

<P><STRONG><a name="[145]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[146]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[147]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[148]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[14a]"></a>xQueueGiveFromISR</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[14c]"></a>xQueueReceive</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLoggingTask
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTTask
</UL>

<P><STRONG><a name="[14d]"></a>xQueuePeek</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[14e]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[14f]"></a>xQueuePeekFromISR</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[150]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uxQueueMessagesWaiting &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTClientSocketWakeupCallback
</UL>

<P><STRONG><a name="[151]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[152]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[154]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[153]"></a>vQueueDelete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLoggingTaskInitialize
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_free
</UL>

<P><STRONG><a name="[588]"></a>uxQueueGetQueueNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[589]"></a>vQueueSetQueueNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[58a]"></a>ucQueueGetQueueType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[156]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[193]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[58b]"></a>pcQueueGetName</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[160]"></a>xTaskCreateStatic</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Init
</UL>

<P><STRONG><a name="[11a]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLoggingTaskInitialize
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationDaemonTaskStartupHook
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStartTCPEchoClientTasks_DifferentSockets
</UL>

<P><STRONG><a name="[162]"></a>vTaskDelete</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RUNNER_RunTests_task
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvThreadSafeDifferentSocketsDifferentTasks
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStartTCPEchoClientTasks_DifferentSockets
</UL>

<P><STRONG><a name="[165]"></a>xTaskIncrementTick</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[137]"></a>xTaskResumeAll</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[134]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[108]"></a>vTaskDelayUntil</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCheckTask
</UL>

<P><STRONG><a name="[109]"></a>vTaskDelay</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RUNNER_RunTests_task
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWifiConnect
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCheckTask
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelper
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGracefulSocketClose
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Ping
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Reset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkRecv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkSend
</UL>

<P><STRONG><a name="[169]"></a>eTaskGetState</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[16a]"></a>uxTaskPriorityGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uxTaskPriorityGet &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
</UL>

<P><STRONG><a name="[16b]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[16c]"></a>vTaskPrioritySet</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPrioritySet &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClientTxTask
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
</UL>

<P><STRONG><a name="[fa]"></a>vTaskSwitchContext</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[16e]"></a>vTaskSuspend</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClientTxTask
</UL>

<P><STRONG><a name="[170]"></a>vTaskResume</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
</UL>

<P><STRONG><a name="[171]"></a>xTaskResumeFromISR</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
</UL>

<P><STRONG><a name="[113]"></a>vTaskStartScheduler</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>vTaskEndScheduler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[100]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCheckTask
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_StartClient
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Send
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Recv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkRecv
</UL>

<P><STRONG><a name="[58c]"></a>xTaskGetIdleTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[179]"></a>xTaskGetIdleTickCountFromISR</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[58d]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>pcTaskGetName</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pcTaskGetName
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>

<P><STRONG><a name="[17b]"></a>vTaskGetInfo</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[17e]"></a>uxTaskGetSystemState</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[17f]"></a>vTaskSetApplicationTaskTag</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[180]"></a>xTaskGetApplicationTaskTag</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[58e]"></a>xTaskCallApplicationTaskHook</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[181]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[158]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[125]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[182]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[183]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSetTimeOutState &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTGetTicks
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGracefulSocketClose
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTSendCallback
</UL>

<P><STRONG><a name="[133]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[135]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTTask
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGracefulSocketClose
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTSendCallback
</UL>

<P><STRONG><a name="[12d]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[58f]"></a>uxTaskGetTaskNumber</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[590]"></a>vTaskSetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
</UL>

<P><STRONG><a name="[132]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[142]"></a>xTaskPriorityInherit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[130]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[144]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1a7]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[141]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[184]"></a>ulTaskNotifyTake</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[185]"></a>xTaskNotifyWait</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
</UL>

<P><STRONG><a name="[186]"></a>xTaskGenericNotify</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>

<P><STRONG><a name="[187]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[188]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[189]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
</UL>

<P><STRONG><a name="[18b]"></a>xTimerGenericCommand</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>

<P><STRONG><a name="[174]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[196]"></a>xTimerCreate</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>

<P><STRONG><a name="[197]"></a>xTimerCreateStatic</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>

<P><STRONG><a name="[198]"></a>xTimerGetTimerDaemonTaskHandle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[199]"></a>xTimerGetPeriod</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[19a]"></a>xTimerGetExpiryTime</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[19b]"></a>pcTimerGetName</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[19c]"></a>xTimerIsTimerActive</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[19d]"></a>pvTimerGetTimerID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[19e]"></a>vTimerSetTimerID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>

<P><STRONG><a name="[591]"></a>uxTimerGetTimerNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[592]"></a>vTimerSetTimerNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[19f]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[175]"></a>xPortStartScheduler</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[177]"></a>vPortEndScheduler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[124]"></a>vPortEnterCritical</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetApplicationTaskTag
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFERPOOL_ReturnBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFERPOOL_GetFreeBuffer
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnConnection
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFreeConnection
</UL>

<P><STRONG><a name="[127]"></a>vPortExitCritical</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetApplicationTaskTag
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFERPOOL_ReturnBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFERPOOL_GetFreeBuffer
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnConnection
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFreeConnection
</UL>

<P><STRONG><a name="[23]"></a>SysTick_Handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetIdleTickCountFromISR
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
</UL>

<P><STRONG><a name="[1a3]"></a>xEventGroupCreateStatic</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>

<P><STRONG><a name="[1a4]"></a>xEventGroupCreate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStartTCPEchoClientTasks_DifferentSockets
</UL>

<P><STRONG><a name="[1a5]"></a>xEventGroupSetBits</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[1a6]"></a>xEventGroupSync</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xEventGroupSync &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClientTxTask
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvThreadSafeDifferentSocketsDifferentTasks
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStartTCPEchoClientTasks_DifferentSockets
</UL>

<P><STRONG><a name="[1a8]"></a>xEventGroupWaitBits</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[1aa]"></a>xEventGroupClearBits</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupClearBitsCallback
</UL>

<P><STRONG><a name="[593]"></a>xEventGroupGetBitsFromISR</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>vEventGroupDelete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vEventGroupDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStartTCPEchoClientTasks_DifferentSockets
</UL>

<P><STRONG><a name="[1ac]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[1ad]"></a>vEventGroupClearBitsCallback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>

<P><STRONG><a name="[594]"></a>uxEventGroupGetNumber</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, event_groups.o(.text), UNUSED)

<P><STRONG><a name="[595]"></a>vEventGroupSetNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, event_groups.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>pvPortMalloc</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrint
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_SignatureVerificationStart
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvThreadSafeDifferentSocketsDifferentTasks
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjectsInit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_OpenSession
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCalloc
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Init
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
</UL>

<P><STRONG><a name="[8e]"></a>vPortFree</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLoggingTask
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrint
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_SignatureVerificationFinal
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvThreadSafeDifferentSocketsDifferentTasks
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjectsFinal
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CloseSession
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_OpenSession
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Cleanup
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_crypto.o(.text)
</UL>
<P><STRONG><a name="[596]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>

<P><STRONG><a name="[597]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>CLK_DisableModuleClock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableCKO
</UL>

<P><STRONG><a name="[1b0]"></a>CLK_DisableCKO</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
</UL>

<P><STRONG><a name="[10e]"></a>CLK_SetModuleClock</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Platform_Init
</UL>

<P><STRONG><a name="[fd]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Platform_Init
</UL>

<P><STRONG><a name="[1b2]"></a>CLK_EnableCKO</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>

<P><STRONG><a name="[598]"></a>CLK_PowerDown</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[599]"></a>CLK_Idle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[59a]"></a>CLK_GetHXTFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[59b]"></a>CLK_GetLXTFreq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[1b4]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[1b5]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[1b6]"></a>CLK_GetCPUFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[10c]"></a>CLK_WaitClockReady</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPowerDownMode
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[1b7]"></a>CLK_SetHCLK</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[fc]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SelectIrDAMode
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLineConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[1b9]"></a>CLK_DisablePLL</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[1b8]"></a>CLK_EnablePLL</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[10d]"></a>CLK_SetCoreClock</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[59c]"></a>CLK_SetSysTickClockSrc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[59d]"></a>CLK_DisableXtalRC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[59e]"></a>CLK_EnableSysTick</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[59f]"></a>CLK_DisableSysTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>CLK_SetPowerDownMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>

<P><STRONG><a name="[5a0]"></a>CLK_EnableDPDWKPin</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[5a1]"></a>CLK_GetPMUWKSrc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[5a2]"></a>CLK_EnableSPDWKPin</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[5a3]"></a>CLK_GetModuleClockSource</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[5a4]"></a>CLK_GetModuleClockDivider</STRONG> (Thumb, 64 bytes, Stack size 28 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>Hard_Fault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[f3]"></a>kbhit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[f4]"></a>IsDebugFifoEmpty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[f5]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[b0]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[f6]"></a>fgetc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>

<P><STRONG><a name="[f7]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[5a5]"></a>SYS_ClearResetSrc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[5a6]"></a>SYS_GetBODStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[5a7]"></a>SYS_GetResetSrc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[5a8]"></a>SYS_IsRegLocked</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[5a9]"></a>SYS_ReadPDID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[5aa]"></a>SYS_ResetChip</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[5ab]"></a>SYS_ResetCPU</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>SYS_ResetModule</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5ac]"></a>SYS_EnableBOD</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[5ad]"></a>SYS_DisableBOD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[5ae]"></a>SYS_SetPowerLevel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[5af]"></a>UART_ClearIntFlag</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[5b0]"></a>UART_Close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[5b1]"></a>UART_DisableFlowCtrl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[5b2]"></a>UART_DisableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[5b3]"></a>UART_EnableFlowCtrl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[524]"></a>UART_EnableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Platform_Init
</UL>

<P><STRONG><a name="[10f]"></a>UART_Open</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Platform_Init
</UL>

<P><STRONG><a name="[5b4]"></a>UART_Read</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>UART_SetLineConfig</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[523]"></a>UART_SetTimeoutCnt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Platform_Init
</UL>

<P><STRONG><a name="[1bc]"></a>UART_SelectIrDAMode</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[5b5]"></a>UART_SelectRS485Mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[5b6]"></a>UART_SelectLINMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[526]"></a>UART_Write</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Send
</UL>

<P><STRONG><a name="[101]"></a>PRNG_Open</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, crypto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PRNG_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
</UL>

<P><STRONG><a name="[102]"></a>PRNG_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, crypto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
</UL>

<P><STRONG><a name="[103]"></a>PRNG_Read</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, crypto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PRNG_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_get
</UL>

<P><STRONG><a name="[5b7]"></a>AES_Open</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5b8]"></a>AES_Start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5b9]"></a>AES_SetKey</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5ba]"></a>AES_SetInitVect</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5bb]"></a>AES_SetDMATransfer</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5bc]"></a>TDES_Open</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5bd]"></a>TDES_Start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5be]"></a>TDES_SetKey</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5bf]"></a>TDES_SetInitVect</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5c0]"></a>TDES_SetDMATransfer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5c1]"></a>SHA_Open</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5c2]"></a>SHA_Start</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5c3]"></a>SHA_SetDMATransfer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5c4]"></a>SHA_Read</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[5c5]"></a>ECC_Complete</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, crypto.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>ECC_IsPrivateKeyValid</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nibble_value
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_curve
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[1c9]"></a>ECC_GeneratePublicKey</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init_curve
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg2Hex
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
</UL>

<P><STRONG><a name="[1ca]"></a>ECC_Mutiply</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init_curve
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg2Hex
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
</UL>

<P><STRONG><a name="[1cb]"></a>ECC_GenerateSecretZ</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init_curve
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg2Hex
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2RegEx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
</UL>

<P><STRONG><a name="[1cc]"></a>ECC_GenerateSignature</STRONG> (Thumb, 616 bytes, Stack size 184 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ecc_codec
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init_curve
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg2Hex
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
</UL>

<P><STRONG><a name="[1ce]"></a>ECC_VerifySignature</STRONG> (Thumb, 884 bytes, Stack size 328 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ecc_codec
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_strcmp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init_curve
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg2Hex
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
</UL>

<P><STRONG><a name="[5c6]"></a>FMC_Close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>FMC_Erase_SPROM</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
</UL>

<P><STRONG><a name="[1d0]"></a>FMC_Erase</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase_SPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetSPKey
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFLASH_update
</UL>

<P><STRONG><a name="[5c7]"></a>FMC_Erase_Block</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5c8]"></a>FMC_Erase_Bank</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5c9]"></a>FMC_GetBootSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>FMC_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_SaveFile
</UL>

<P><STRONG><a name="[1d3]"></a>FMC_Read</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFLASH_update
</UL>

<P><STRONG><a name="[5ca]"></a>FMC_Read_64</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5cb]"></a>FMC_ReadDataFlashBaseAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5cc]"></a>FMC_SetBootSource</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>FMC_Write</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetSPKey
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFLASH_update
</UL>

<P><STRONG><a name="[5cd]"></a>FMC_Write8Bytes</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5ce]"></a>FMC_WriteMultiple</STRONG> (Thumb, 306 bytes, Stack size 20 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5cf]"></a>FMC_Write_OTP</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5d0]"></a>FMC_Read_OTP</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5d1]"></a>FMC_Lock_OTP</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5d2]"></a>FMC_Is_OTP_Locked</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>FMC_ReadConfig</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>

<P><STRONG><a name="[1d4]"></a>FMC_WriteConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
</UL>

<P><STRONG><a name="[5d3]"></a>FMC_GetChkSum</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5d4]"></a>FMC_CheckAllOne</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>FMC_SetSPKey</STRONG> (Thumb, 262 bytes, Stack size 36 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
</UL>

<P><STRONG><a name="[5d5]"></a>FMC_CompareSPKey</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>xLoggingTaskInitialize</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, aws_logging_task_dynamic_buffers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xLoggingTaskInitialize &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMiscInitialization
</UL>

<P><STRONG><a name="[112]"></a>vLoggingPrintf</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, aws_logging_task_dynamic_buffers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWifiConnect
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvThreadSafeDifferentSocketsDifferentTasks
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTimeout
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckBufferUnmodified
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckRxTxBuffers
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecvHelper
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOptHelper
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelper
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAwsIotBrokerConnectHelper
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSecureConnectHelper
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjects
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjectsInit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_unlock
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_lock
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aws_mbedtls_mutex_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Shutdown
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Connect
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPrivateKeySigningCallback
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Platform_Init
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_StartClient
</UL>

<P><STRONG><a name="[1d9]"></a>vLoggingPrint</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, aws_logging_task_dynamic_buffers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[84]"></a>TEST_Full_TCP_SETUP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aws_test_tcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>TEST_Full_TCP_TEAR_DOWN</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = TEST_Full_TCP_TEAR_DOWN &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[1f4]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_ &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvShutdownHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[1f6]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_run</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[1fa]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_TwoSecureConnections_</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_TwoSecureConnections_ &rArr; prvTwoSecureConnections &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTwoSecureConnections
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[1fb]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_TwoSecureConnections_run</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_TwoSecureConnections_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[1fd]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlockingConnect_</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlockingConnect_ &rArr; prvNonBlockingConnect &rArr; SOCKETS_SetSockOpt &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingConnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[1fe]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlockingConnect_run</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlockingConnect_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[200]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SockEventHandler_</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SockEventHandler_ &rArr; prvTriggerWrongRootCA &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTriggerWrongRootCA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[201]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SockEventHandler_run</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SockEventHandler_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[203]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_Invalid_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_Invalid_ &rArr; prvRecv_Invalid &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecv_Invalid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[204]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_Invalid_run</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_Invalid_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[206]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Send_Invalid_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Send_Invalid_ &rArr; prvSend_Invalid &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSend_Invalid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[207]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Send_Invalid_run</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Send_Invalid_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[209]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SendRecv_VaryLength_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SendRecv_VaryLength_ &rArr; prvSOCKETS_SendRecv_VaryLength &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[20a]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SendRecv_VaryLength_run</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SendRecv_VaryLength_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[20c]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_ByteByByte_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_ByteByByte_ &rArr; prvTestSOCKETS_Recv_ByteByByte &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Recv_ByteByByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[20d]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_ByteByByte_run</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_ByteByByte_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[20f]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Close_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Close_ &rArr; prvTestSOCKETS_Close &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[210]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Close_run</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Close_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[212]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Shutdown_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Shutdown_ &rArr; prvSOCKETS_Shutdown &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[213]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Shutdown_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Shutdown_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[215]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_InvalidParams_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_InvalidParams_ &rArr; prvSetSockOpt_InvalidParams &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOpt_InvalidParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[216]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_InvalidParams_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_InvalidParams_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[218]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlocking_Test_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlocking_Test_ &rArr; prvSOCKETS_NonBlocking_Test &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[219]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlocking_Test_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlocking_Test_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[21b]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_RCVTIMEO_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_RCVTIMEO_ &rArr; prvSOCKETS_SetSockOpt_RCVTIMEO &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[21c]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_RCVTIMEO_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_RCVTIMEO_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[21e]"></a>prvStartTCPEchoClientTasks_DifferentSockets</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvStartTCPEchoClientTasks_DifferentSockets &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_
</UL>

<P><STRONG><a name="[21f]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_ &rArr; prvStartTCPEchoClientTasks_DifferentSockets &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStartTCPEchoClientTasks_DifferentSockets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[220]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[222]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidAddressLength_</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidAddressLength_ &rArr; prvConnect_InvalidAddressLength &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnect_InvalidAddressLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[223]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidAddressLength_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidAddressLength_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[225]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidParams_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidParams_ &rArr; prvSOCKETS_Connect_InvalidParams &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Connect_InvalidParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[226]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidParams_run</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidParams_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[228]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SERVER_NAME_INDICATION_</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SERVER_NAME_INDICATION_ &rArr; prvServerDomainName &rArr; prvConnectHelper &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[229]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SERVER_NAME_INDICATION_run</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SERVER_NAME_INDICATION_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[22b]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_TRUSTED_SERVER_CERTIFICATE_</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_TRUSTED_SERVER_CERTIFICATE_ &rArr; prvTrustedServerCertificate &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTrustedServerCertificate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[22c]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_TRUSTED_SERVER_CERTIFICATE_run</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_TRUSTED_SERVER_CERTIFICATE_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[230]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_SameSocketDifferentTasks_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_SameSocketDifferentTasks_ &rArr; prvSOCKETS_Threadsafe_SameSocketDifferentTasks &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[231]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_SameSocketDifferentTasks_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_SameSocketDifferentTasks_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[233]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_On_Unconnected_Socket_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_On_Unconnected_Socket_ &rArr; prvSOCKETS_Recv_On_Unconnected_Socket &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[234]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_On_Unconnected_Socket_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_On_Unconnected_Socket_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[236]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownWithoutReceiving_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownWithoutReceiving_ &rArr; prvSOCKETS_ShutdownWithoutReceiving &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownWithoutReceiving
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[237]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownWithoutReceiving_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownWithoutReceiving_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[239]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownInvalidParams_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownInvalidParams_ &rArr; prvSOCKETS_ShutdownInvalidParams &rArr; prvCloseHelper &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownInvalidParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[23a]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownInvalidParams_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownInvalidParams_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[23c]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseWithoutReceiving_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseWithoutReceiving_ &rArr; prvSOCKETS_CloseWithoutReceiving &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_CloseWithoutReceiving
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[23d]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseWithoutReceiving_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseWithoutReceiving_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[23f]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseInvalidParams_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseInvalidParams_ &rArr; prvSOCKETS_CloseInvalidParams &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_CloseInvalidParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[240]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseInvalidParams_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseInvalidParams_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[241]"></a>TEST_Full_TCP_AFQP_SOCKETS_inet_addr_quick_HappyCase_</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_inet_addr_quick_HappyCase_ &rArr; UnityAssertEqualNumber &rArr; UnityTestResultsFailBegin &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[242]"></a>TEST_Full_TCP_AFQP_SOCKETS_inet_addr_quick_HappyCase_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_inet_addr_quick_HappyCase_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[243]"></a>TEST_Full_TCP_AFQP_SOCKETS_htons_HappyCase_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_htons_HappyCase_ &rArr; UnityAssertEqualNumber &rArr; UnityTestResultsFailBegin &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[244]"></a>TEST_Full_TCP_AFQP_SOCKETS_htons_HappyCase_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_htons_HappyCase_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[245]"></a>TEST_Full_TCP_AFQP_SOCKETS_Recv_Invalid_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Recv_Invalid_ &rArr; prvRecv_Invalid &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecv_Invalid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[246]"></a>TEST_Full_TCP_AFQP_SOCKETS_Recv_Invalid_run</STRONG> (Thumb, 974 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Recv_Invalid_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[247]"></a>TEST_Full_TCP_AFQP_SOCKETS_Send_Invalid_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Send_Invalid_ &rArr; prvSend_Invalid &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSend_Invalid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[248]"></a>TEST_Full_TCP_AFQP_SOCKETS_Send_Invalid_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Send_Invalid_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[24a]"></a>TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidInputParams_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidInputParams_ &rArr; prvSOCKETS_Socket_InvalidInputParams &rArr; prvCloseHelper &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_InvalidInputParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[24b]"></a>TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidInputParams_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidInputParams_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[24d]"></a>TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidTooManySockets_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidTooManySockets_ &rArr; prvSOCKETS_Socket_InvalidTooManySockets &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_InvalidTooManySockets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[24e]"></a>TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidTooManySockets_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidTooManySockets_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[24f]"></a>TEST_Full_TCP_AFQP_SOCKETS_SendRecv_VaryLength_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_SendRecv_VaryLength_ &rArr; prvSOCKETS_SendRecv_VaryLength &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[250]"></a>TEST_Full_TCP_AFQP_SOCKETS_SendRecv_VaryLength_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_SendRecv_VaryLength_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[251]"></a>TEST_Full_TCP_AFQP_SOCKETS_Recv_ByteByByte_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Recv_ByteByByte_ &rArr; prvTestSOCKETS_Recv_ByteByByte &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Recv_ByteByByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[252]"></a>TEST_Full_TCP_AFQP_SOCKETS_Recv_ByteByByte_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Recv_ByteByByte_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[253]"></a>TEST_Full_TCP_AFQP_SOCKETS_Close_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Close_ &rArr; prvTestSOCKETS_Close &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[254]"></a>TEST_Full_TCP_AFQP_SOCKETS_Close_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Close_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[255]"></a>TEST_Full_TCP_AFQP_SOCKETS_Shutdown_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Shutdown_ &rArr; prvSOCKETS_Shutdown &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[256]"></a>TEST_Full_TCP_AFQP_SOCKETS_Shutdown_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Shutdown_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[257]"></a>TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_InvalidParams_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_InvalidParams_ &rArr; prvSetSockOpt_InvalidParams &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOpt_InvalidParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[258]"></a>TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_InvalidParams_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_InvalidParams_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[259]"></a>TEST_Full_TCP_AFQP_SOCKETS_NonBlocking_Test_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_NonBlocking_Test_ &rArr; prvSOCKETS_NonBlocking_Test &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[25a]"></a>TEST_Full_TCP_AFQP_SOCKETS_NonBlocking_Test_run</STRONG> (Thumb, 1072 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_NonBlocking_Test_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[25b]"></a>TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_RCVTIMEO_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_RCVTIMEO_ &rArr; prvSOCKETS_SetSockOpt_RCVTIMEO &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[25c]"></a>TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_RCVTIMEO_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_RCVTIMEO_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[25e]"></a>TEST_Full_TCP_AFQP_SOCKETS_Socket_TCP_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Socket_TCP_ &rArr; prvSOCKETS_Socket_TCP &rArr; prvCloseHelper &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_TCP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[25f]"></a>TEST_Full_TCP_AFQP_SOCKETS_Socket_TCP_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Socket_TCP_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[260]"></a>TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_ &rArr; prvStartTCPEchoClientTasks_DifferentSockets &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStartTCPEchoClientTasks_DifferentSockets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[261]"></a>TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[262]"></a>TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidAddressLength_</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidAddressLength_ &rArr; prvConnect_InvalidAddressLength &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnect_InvalidAddressLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[263]"></a>TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidAddressLength_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidAddressLength_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[264]"></a>TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidParams_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidParams_ &rArr; prvSOCKETS_Connect_InvalidParams &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Connect_InvalidParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[265]"></a>TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidParams_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidParams_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[266]"></a>TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_SameSocketDifferentTasks_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_SameSocketDifferentTasks_ &rArr; prvSOCKETS_Threadsafe_SameSocketDifferentTasks &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[267]"></a>TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_SameSocketDifferentTasks_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_SameSocketDifferentTasks_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[268]"></a>TEST_Full_TCP_AFQP_SOCKETS_Recv_On_Unconnected_Socket_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Recv_On_Unconnected_Socket_ &rArr; prvSOCKETS_Recv_On_Unconnected_Socket &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[269]"></a>TEST_Full_TCP_AFQP_SOCKETS_Recv_On_Unconnected_Socket_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_Recv_On_Unconnected_Socket_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[26a]"></a>TEST_Full_TCP_AFQP_SOCKETS_ShutdownWithoutReceiving_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_ShutdownWithoutReceiving_ &rArr; prvSOCKETS_ShutdownWithoutReceiving &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownWithoutReceiving
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[26b]"></a>TEST_Full_TCP_AFQP_SOCKETS_ShutdownWithoutReceiving_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_ShutdownWithoutReceiving_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[26c]"></a>TEST_Full_TCP_AFQP_SOCKETS_ShutdownInvalidParams_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_ShutdownInvalidParams_ &rArr; prvSOCKETS_ShutdownInvalidParams &rArr; prvCloseHelper &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownInvalidParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[26d]"></a>TEST_Full_TCP_AFQP_SOCKETS_ShutdownInvalidParams_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_ShutdownInvalidParams_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[26e]"></a>TEST_Full_TCP_AFQP_SOCKETS_CloseWithoutReceiving_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_CloseWithoutReceiving_ &rArr; prvSOCKETS_CloseWithoutReceiving &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_CloseWithoutReceiving
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[26f]"></a>TEST_Full_TCP_AFQP_SOCKETS_CloseWithoutReceiving_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_CloseWithoutReceiving_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[270]"></a>TEST_Full_TCP_AFQP_SOCKETS_CloseInvalidParams_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_CloseInvalidParams_ &rArr; prvSOCKETS_CloseInvalidParams &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_CloseInvalidParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[271]"></a>TEST_Full_TCP_AFQP_SOCKETS_CloseInvalidParams_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_CloseInvalidParams_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>

<P><STRONG><a name="[272]"></a>TEST_Full_TCP_GROUP_RUNNER</STRONG> (Thumb, 1196 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TEST_Full_TCP_GROUP_RUNNER &rArr; TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_ByteByByte_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_ByteByByte_run
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SendRecv_VaryLength_run
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Send_Invalid_run
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_Invalid_run
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SockEventHandler_run
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlockingConnect_run
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_TwoSecureConnections_run
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_run
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_CloseInvalidParams_run
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_CloseWithoutReceiving_run
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_ShutdownInvalidParams_run
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_ShutdownWithoutReceiving_run
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Recv_On_Unconnected_Socket_run
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_SameSocketDifferentTasks_run
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidParams_run
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidAddressLength_run
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_run
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Socket_TCP_run
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_RCVTIMEO_run
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_NonBlocking_Test_run
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_InvalidParams_run
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Shutdown_run
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Close_run
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Recv_ByteByByte_run
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_SendRecv_VaryLength_run
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidTooManySockets_run
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidInputParams_run
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Send_Invalid_run
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Recv_Invalid_run
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_htons_HappyCase_run
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_inet_addr_quick_HappyCase_run
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseInvalidParams_run
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseWithoutReceiving_run
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownInvalidParams_run
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownWithoutReceiving_run
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_On_Unconnected_Socket_run
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_SameSocketDifferentTasks_run
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_TRUSTED_SERVER_CERTIFICATE_run
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SERVER_NAME_INDICATION_run
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidParams_run
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidAddressLength_run
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_run
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_RCVTIMEO_run
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlocking_Test_run
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_InvalidParams_run
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Shutdown_run
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Close_run
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTests
</UL>

<P><STRONG><a name="[274]"></a>TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_SNDTIMEO_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_SNDTIMEO_ &rArr; prvSOCKETS_SetSockOpt_SNDTIMEO &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_SNDTIMEO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[275]"></a>TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_SNDTIMEO_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>

<P><STRONG><a name="[276]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SNDTIMEO_</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SNDTIMEO_ &rArr; prvSOCKETS_SetSockOpt_SNDTIMEO &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_SNDTIMEO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[277]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SNDTIMEO_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>

<P><STRONG><a name="[278]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Socket_InvalidTooManySockets_</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aws_test_tcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[279]"></a>TEST_Full_TCP_AFQP_SECURE_SOCKETS_Socket_InvalidTooManySockets_run</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aws_test_tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>

<P><STRONG><a name="[7e]"></a>TEST_RUNNER_RunTests_task</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, aws_test_runner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TEST_RUNNER_RunTests_task &rArr; RunTests &rArr; TEST_Full_TCP_GROUP_RUNNER &rArr; TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_ByteByByte_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityEnd
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityBegin
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTests
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>SYSTEM_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, aws_system_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SYSTEM_Init &rArr; SOCKETS_Init &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFERPOOL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationDaemonTaskStartupHook
</UL>

<P><STRONG><a name="[27d]"></a>BUFFERPOOL_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, aws_bufferpool_static_thread_safe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[8b]"></a>BUFFERPOOL_GetFreeBuffer</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, aws_bufferpool_static_thread_safe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BUFFERPOOL_GetFreeBuffer &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_mqtt_agent.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>BUFFERPOOL_ReturnBuffer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, aws_bufferpool_static_thread_safe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BUFFERPOOL_ReturnBuffer &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_ReturnBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_mqtt_agent.o(.text)
</UL>
<P><STRONG><a name="[27e]"></a>MQTT_AGENT_Init</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MQTT_AGENT_Init &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[29e]"></a>MQTT_AGENT_Create</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, aws_mqtt_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFreeConnection
</UL>

<P><STRONG><a name="[29f]"></a>MQTT_AGENT_Delete</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aws_mqtt_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnConnection
</UL>

<P><STRONG><a name="[2a0]"></a>MQTT_AGENT_Connect</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, aws_mqtt_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
</UL>

<P><STRONG><a name="[2a1]"></a>MQTT_AGENT_Disconnect</STRONG> (Thumb, 34 bytes, Stack size 48 bytes, aws_mqtt_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
</UL>

<P><STRONG><a name="[2a2]"></a>MQTT_AGENT_Subscribe</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, aws_mqtt_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
</UL>

<P><STRONG><a name="[2a3]"></a>MQTT_AGENT_Unsubscribe</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, aws_mqtt_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
</UL>

<P><STRONG><a name="[2a4]"></a>MQTT_AGENT_Publish</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, aws_mqtt_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
</UL>

<P><STRONG><a name="[2a5]"></a>MQTT_AGENT_ReturnBuffer</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aws_mqtt_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFERPOOL_ReturnBuffer
</UL>

<P><STRONG><a name="[29d]"></a>MQTT_Init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MQTT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetRxMessageState
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Init
</UL>

<P><STRONG><a name="[294]"></a>MQTT_Connect</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTT_Connect &rArr; prvSendData &rArr; prvGetCurrentTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEncodeRemainingLength
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSizeOfRemainingLength
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteString
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendData
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetCurrentTickCount
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFreeBuffer
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTConnect
</UL>

<P><STRONG><a name="[290]"></a>MQTT_Disconnect</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MQTT_Disconnect &rArr; prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeCallback
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendData
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTDisconnect
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvManageConnections
</UL>

<P><STRONG><a name="[297]"></a>MQTT_Subscribe</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MQTT_Subscribe &rArr; prvStoreSubscription &rArr; prvRemoveSubscription &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreSubscription
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEncodeRemainingLength
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSizeOfRemainingLength
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteString
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRemoveSubscription
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendData
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetCurrentTickCount
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFreeBuffer
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTSubscribe
</UL>

<P><STRONG><a name="[299]"></a>MQTT_Unsubscribe</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTT_Unsubscribe &rArr; prvSendData &rArr; prvGetCurrentTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEncodeRemainingLength
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSizeOfRemainingLength
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteString
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendData
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetCurrentTickCount
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFreeBuffer
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTUnSubscribe
</UL>

<P><STRONG><a name="[29b]"></a>MQTT_Publish</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTT_Publish &rArr; prvSendData &rArr; prvGetCurrentTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEncodeRemainingLength
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSizeOfRemainingLength
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteString
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendData
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetCurrentTickCount
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFreeBuffer
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTPublish
</UL>

<P><STRONG><a name="[28f]"></a>MQTT_ParseReceivedData</STRONG> (Thumb, 592 bytes, Stack size 64 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = MQTT_ParseReceivedData &rArr; prvProcessReceivedMQTTPacket &rArr; prvProcessReceivedCONNACK &rArr; prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedMQTTPacket
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDecodeRemainingLength
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedFixedHeaderOnlyMQTTPacket
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeCallback
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetRxMessageState
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFreeBuffer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvManageConnections
</UL>

<P><STRONG><a name="[2c4]"></a>MQTT_ReturnBuffer</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, aws_mqtt_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
</UL>

<P><STRONG><a name="[291]"></a>MQTT_Periodic</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MQTT_Periodic &rArr; prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRemoveSubscriptionForSubscribeOrUnsubscribeBuffer
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeCallback
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendData
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsTimeElapsed
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetCurrentTickCount
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvManageConnections
</UL>

<P><STRONG><a name="[2c6]"></a>Test_prvGetTopicFilterType</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aws_mqtt_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetTopicFilterType
</UL>

<P><STRONG><a name="[2c7]"></a>Test_prvDoesTopicMatchTopicFilter</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, aws_mqtt_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDoesTopicMatchTopicFilter
</UL>

<P><STRONG><a name="[2c8]"></a>Test_prvResetMQTTContext</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aws_mqtt_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
</UL>

<P><STRONG><a name="[2ce]"></a>CRYPTO_ConfigureHeap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aws_crypto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRYPTO_ConfigureHeap
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMbedTLS_Initialize
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[2d0]"></a>CRYPTO_SignatureVerificationStart</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, aws_crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</UL>

<P><STRONG><a name="[2d5]"></a>CRYPTO_SignatureVerificationUpdate</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, aws_crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
</UL>

<P><STRONG><a name="[2d8]"></a>CRYPTO_SignatureVerificationFinal</STRONG> (Thumb, 128 bytes, Stack size 88 bytes, aws_crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvVerifySignature
</UL>

<P><STRONG><a name="[2db]"></a>aws_mbedtls_mutex_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = aws_mbedtls_mutex_init &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.text)
</UL>
<P><STRONG><a name="[2dc]"></a>aws_mbedtls_mutex_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = aws_mbedtls_mutex_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.text)
</UL>
<P><STRONG><a name="[2dd]"></a>aws_mbedtls_mutex_lock</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = aws_mbedtls_mutex_lock &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.text)
</UL>
<P><STRONG><a name="[2de]"></a>aws_mbedtls_mutex_unlock</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = aws_mbedtls_mutex_unlock &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.text)
</UL>
<P><STRONG><a name="[2e6]"></a>prvSessionPointerFromHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestUpdate
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestInit
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestFinal
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Verify
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Sign
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjectsFinal
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjects
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjectsInit
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CloseSession
</UL>

<P><STRONG><a name="[2df]"></a>prvMbedTLS_Initialize</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = prvMbedTLS_Initialize &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_threading_set_alt
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_ConfigureHeap
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Initialize
</UL>

<P><STRONG><a name="[0]"></a>C_Initialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = C_Initialize &rArr; prvMbedTLS_Initialize &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMbedTLS_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>C_Finalize</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = C_Finalize &rArr; mbedtls_entropy_free &rArr; mbedtls_sha256_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>C_GetFunctionList</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aws_pkcs11_mbedtls.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> aws_pkcs11_mbedtls.o(.data)
<LI> aws_tls.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>C_GetSlotList</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = C_GetSlotList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>C_OpenSession</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = C_OpenSession &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>C_CloseSession</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C_CloseSession &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>C_CreateObject</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = C_CreateObject &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_SaveObject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>C_DestroyObject</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_pkcs11_mbedtls.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>C_GetAttributeValue</STRONG> (Thumb, 488 bytes, Stack size 64 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = C_GetAttributeValue &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValueCleanup
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>C_FindObjectsInit</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = C_FindObjectsInit &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>C_FindObjects</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = C_FindObjects &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_FindObject
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>C_FindObjectsFinal</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C_FindObjectsFinal &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>C_DigestInit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = C_DigestInit &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>C_DigestUpdate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = C_DigestUpdate &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>C_DigestFinal</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = C_DigestFinal &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>C_SignInit</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = C_SignInit &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValueCleanup
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPrivateKeySigningCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>C_Sign</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = C_Sign &rArr; mbedtls_pk_sign &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPrivateKeySigningCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>C_VerifyInit</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = C_VerifyInit &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValueCleanup
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_GetObjectValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>C_Verify</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = C_Verify &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSessionPointerFromHandle
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>C_GenerateKeyPair</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = C_GenerateKeyPair &rArr; mbedtls_ecp_gen_key &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_SaveObject
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>C_GenerateRandom</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, aws_pkcs11_mbedtls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = C_GenerateRandom &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.data)
</UL>
<P><STRONG><a name="[2f7]"></a>PKCS11_PAL_SaveFile</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, aws_pkcs11_pal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFLASH_update
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[2f9]"></a>PKCS11_PAL_ReadFile</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, aws_pkcs11_pal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[5d6]"></a>PKCS11_PAL_ReleaseFileData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aws_pkcs11_pal.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>PKCS11_PAL_SaveObject</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aws_pkcs11_pal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PKCS11_PAL_SaveObject
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
</UL>

<P><STRONG><a name="[2f0]"></a>PKCS11_PAL_FindObject</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_pkcs11_pal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjects
</UL>

<P><STRONG><a name="[2ed]"></a>PKCS11_PAL_GetObjectValue</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, aws_pkcs11_pal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PKCS11_PAL_GetObjectValue
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
</UL>

<P><STRONG><a name="[2ef]"></a>PKCS11_PAL_GetObjectValueCleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aws_pkcs11_pal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
</UL>

<P><STRONG><a name="[2fa]"></a>mbedtls_aes_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
</UL>

<P><STRONG><a name="[2fb]"></a>mbedtls_aes_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
</UL>

<P><STRONG><a name="[2fe]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 496 bytes, Stack size 20 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
</UL>

<P><STRONG><a name="[2fd]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 204 bytes, Stack size 320 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
</UL>

<P><STRONG><a name="[300]"></a>mbedtls_internal_aes_encrypt</STRONG> (Thumb, 1306 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[301]"></a>mbedtls_internal_aes_decrypt</STRONG> (Thumb, 1262 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[2ff]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb8
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[302]"></a>mbedtls_aes_crypt_cbc</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc_wrap
</UL>

<P><STRONG><a name="[303]"></a>mbedtls_aes_crypt_cfb128</STRONG> (Thumb, 134 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_aes_crypt_cfb128 &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cfb128_wrap
</UL>

<P><STRONG><a name="[304]"></a>mbedtls_aes_crypt_cfb8</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[305]"></a>mbedtls_aes_crypt_ctr</STRONG> (Thumb, 118 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_aes_crypt_ctr &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ctr_wrap
</UL>

<P><STRONG><a name="[306]"></a>mbedtls_aes_self_test</STRONG> (Thumb, 954 bytes, Stack size 504 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[308]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[307]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecparams
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[309]"></a>mbedtls_asn1_get_bool</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_bool &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[30a]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
</UL>

<P><STRONG><a name="[30b]"></a>mbedtls_asn1_get_mpi</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>

<P><STRONG><a name="[30d]"></a>mbedtls_asn1_get_bitstring</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
</UL>

<P><STRONG><a name="[30e]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
</UL>

<P><STRONG><a name="[30f]"></a>mbedtls_asn1_get_sequence_of</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
</UL>

<P><STRONG><a name="[311]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
</UL>

<P><STRONG><a name="[312]"></a>mbedtls_asn1_get_alg_null</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
</UL>

<P><STRONG><a name="[313]"></a>mbedtls_asn1_free_named_data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data_list
</UL>

<P><STRONG><a name="[315]"></a>mbedtls_asn1_free_named_data_list</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data
</UL>

<P><STRONG><a name="[316]"></a>mbedtls_asn1_find_named_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_store_named_data
</UL>

<P><STRONG><a name="[31b]"></a>mbedtls_asn1_write_len</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, asn1write.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_octet_string
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bitstring
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_ia5_string
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_printable_string
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_int
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bool
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_null
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey_der
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_rsa_pubkey
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[31c]"></a>mbedtls_asn1_write_tag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, asn1write.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_octet_string
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bitstring
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_ia5_string
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_printable_string
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_int
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bool
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_null
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey_der
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_rsa_pubkey
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[317]"></a>mbedtls_asn1_write_raw_buffer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, asn1write.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_asn1_write_raw_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_octet_string
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_ia5_string
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_printable_string
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
</UL>

<P><STRONG><a name="[318]"></a>mbedtls_asn1_write_mpi</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, asn1write.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_rsa_pubkey
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>

<P><STRONG><a name="[31d]"></a>mbedtls_asn1_write_null</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
</UL>

<P><STRONG><a name="[31e]"></a>mbedtls_asn1_write_oid</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_asn1_write_oid &rArr; mbedtls_asn1_write_raw_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_param
</UL>

<P><STRONG><a name="[31f]"></a>mbedtls_asn1_write_algorithm_identifier</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_null
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey_der
</UL>

<P><STRONG><a name="[320]"></a>mbedtls_asn1_write_bool</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[321]"></a>mbedtls_asn1_write_int</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, asn1write.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_asn1_write_int &rArr; mbedtls_asn1_write_len
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[322]"></a>mbedtls_asn1_write_printable_string</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[323]"></a>mbedtls_asn1_write_ia5_string</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[324]"></a>mbedtls_asn1_write_bitstring</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[325]"></a>mbedtls_asn1_write_octet_string</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
</UL>

<P><STRONG><a name="[326]"></a>mbedtls_asn1_store_named_data</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, asn1write.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_find_named_data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[328]"></a>mbedtls_base64_encode</STRONG> (Thumb, 312 bytes, Stack size 36 bytes, base64.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
</UL>

<P><STRONG><a name="[329]"></a>mbedtls_base64_decode</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, base64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[327]"></a>mbedtls_base64_self_test</STRONG> (Thumb, 124 bytes, Stack size 152 bytes, base64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_encode
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[338]"></a>mbedtls_mpi_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_rsa_pubkey
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[32b]"></a>mbedtls_mpi_free</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_rsa_pubkey
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[32c]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_swap
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>

<P><STRONG><a name="[32d]"></a>mbedtls_mpi_shrink</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_shrink &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
</UL>

<P><STRONG><a name="[32e]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export_crt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_copy
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import
</UL>

<P><STRONG><a name="[426]"></a>mbedtls_mpi_swap</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[32f]"></a>mbedtls_mpi_safe_cond_assign</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_safe_cond_assign &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
</UL>

<P><STRONG><a name="[330]"></a>mbedtls_mpi_safe_cond_swap</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>

<P><STRONG><a name="[331]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_string
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[3ac]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>

<P><STRONG><a name="[332]"></a>mbedtls_mpi_set_bit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>

<P><STRONG><a name="[354]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[333]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[319]"></a>mbedtls_mpi_size</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>

<P><STRONG><a name="[335]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>

<P><STRONG><a name="[337]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>

<P><STRONG><a name="[336]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>

<P><STRONG><a name="[33a]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[33b]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[33c]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[33d]"></a>mbedtls_mpi_add_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[33e]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[340]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[341]"></a>mbedtls_mpi_read_string</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_get_digit
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_string
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>

<P><STRONG><a name="[344]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_cmp
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
</UL>

<P><STRONG><a name="[343]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 52 bytes, Stack size 28 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export_crt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export_raw
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>

<P><STRONG><a name="[345]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[346]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[349]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 980 bytes, Stack size 104 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_int
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[34a]"></a>mbedtls_mpi_div_int</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[34c]"></a>mbedtls_mpi_mod_int</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_mpi_mod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
</UL>

<P><STRONG><a name="[34d]"></a>mbedtls_mpi_write_string</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[30c]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
</UL>

<P><STRONG><a name="[31a]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export_raw
</UL>

<P><STRONG><a name="[34e]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[351]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1146 bytes, Stack size 176 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[353]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[355]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 88 bytes, Stack size 280 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[356]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 816 bytes, Stack size 128 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[359]"></a>mbedtls_mpi_is_prime</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = mbedtls_mpi_is_prime &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
</UL>

<P><STRONG><a name="[35a]"></a>mbedtls_mpi_gen_prime</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_check_small_factors
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_int
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[35b]"></a>mbedtls_mpi_self_test</STRONG> (Thumb, 950 bytes, Stack size 104 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[5d7]"></a>mbedtls_cipher_list</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cipher.o(.text), UNUSED)

<P><STRONG><a name="[474]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[35c]"></a>mbedtls_cipher_info_from_string</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[3d0]"></a>mbedtls_cipher_info_from_values</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[35d]"></a>mbedtls_cipher_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
</UL>

<P><STRONG><a name="[35e]"></a>mbedtls_cipher_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>

<P><STRONG><a name="[360]"></a>mbedtls_cipher_set_padding_mode</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[35f]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[3d1]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[361]"></a>mbedtls_cipher_set_iv</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_set_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[36d]"></a>mbedtls_cipher_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[362]"></a>mbedtls_cipher_update_ad</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
</UL>

<P><STRONG><a name="[364]"></a>mbedtls_cipher_update</STRONG> (Thumb, 540 bytes, Stack size 48 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[367]"></a>mbedtls_cipher_finish</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[368]"></a>mbedtls_cipher_write_tag</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[36a]"></a>mbedtls_cipher_check_tag</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_constant_time_memcmp
</UL>

<P><STRONG><a name="[36c]"></a>mbedtls_cipher_crypt</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[36e]"></a>mbedtls_cipher_auth_encrypt</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[370]"></a>mbedtls_cipher_auth_decrypt</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[2e2]"></a>mbedtls_ctr_drbg_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ctr_drbg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMbedTLS_Initialize
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[377]"></a>mbedtls_ctr_drbg_reseed</STRONG> (Thumb, 142 bytes, Stack size 408 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</UL>

<P><STRONG><a name="[378]"></a>mbedtls_ctr_drbg_seed_entropy_len</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[2e3]"></a>mbedtls_ctr_drbg_seed</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMbedTLS_Initialize
</UL>

<P><STRONG><a name="[2e5]"></a>mbedtls_ctr_drbg_free</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ctr_drbg_free &rArr; mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Finalize
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[37c]"></a>mbedtls_ctr_drbg_set_prediction_resistance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctr_drbg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>

<P><STRONG><a name="[5d8]"></a>mbedtls_ctr_drbg_set_entropy_len</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctr_drbg.o(.text), UNUSED)

<P><STRONG><a name="[5d9]"></a>mbedtls_ctr_drbg_set_reseed_interval</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctr_drbg.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>mbedtls_ctr_drbg_update</STRONG> (Thumb, 44 bytes, Stack size 64 bytes, ctr_drbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
</UL>

<P><STRONG><a name="[37a]"></a>mbedtls_ctr_drbg_random_with_add</STRONG> (Thumb, 252 bytes, Stack size 112 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</UL>

<P><STRONG><a name="[91]"></a>mbedtls_ctr_drbg_random</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateRandom
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.text)
</UL>
<P><STRONG><a name="[37b]"></a>mbedtls_ctr_drbg_self_test</STRONG> (Thumb, 332 bytes, Stack size 360 bytes, ctr_drbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_set_prediction_resistance
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[37d]"></a>mbedtls_ecdh_gen_public</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
</UL>

<P><STRONG><a name="[37f]"></a>mbedtls_ecdh_compute_shared</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
</UL>

<P><STRONG><a name="[385]"></a>mbedtls_ecdh_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecdh_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[386]"></a>mbedtls_ecdh_free</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[388]"></a>mbedtls_ecdh_make_params</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, ecdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_group
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>

<P><STRONG><a name="[38b]"></a>mbedtls_ecdh_read_params</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[38e]"></a>mbedtls_ecdh_get_params</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ecdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>

<P><STRONG><a name="[391]"></a>mbedtls_ecdh_make_public</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[392]"></a>mbedtls_ecdh_read_public</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ecdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
</UL>

<P><STRONG><a name="[393]"></a>mbedtls_ecdh_calc_secret</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = mbedtls_ecdh_calc_secret &rArr; mbedtls_ecdh_compute_shared &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[395]"></a>mbedtls_ecdsa_sign</STRONG> (Thumb, 502 bytes, Stack size 128 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[396]"></a>mbedtls_ecdsa_verify</STRONG> (Thumb, 376 bytes, Stack size 128 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_mpi
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>

<P><STRONG><a name="[399]"></a>mbedtls_ecdsa_write_signature</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
</UL>

<P><STRONG><a name="[39a]"></a>mbedtls_ecdsa_read_signature</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
</UL>

<P><STRONG><a name="[39b]"></a>mbedtls_ecdsa_genkey</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ecdsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[39d]"></a>mbedtls_ecdsa_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
</UL>

<P><STRONG><a name="[39f]"></a>mbedtls_ecdsa_from_keypair</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_ecdsa_from_keypair &rArr; mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>

<P><STRONG><a name="[3a0]"></a>mbedtls_ecdsa_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>

<P><STRONG><a name="[3a3]"></a>mbedtls_ecp_curve_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_name
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
</UL>

<P><STRONG><a name="[3a2]"></a>mbedtls_ecp_grp_id_list</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_grp_id_list
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[3a4]"></a>mbedtls_ecp_curve_info_from_grp_id</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_group
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
</UL>

<P><STRONG><a name="[3a5]"></a>mbedtls_ecp_curve_info_from_tls_id</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_ecp_curve_info_from_tls_id
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
</UL>

<P><STRONG><a name="[3a6]"></a>mbedtls_ecp_curve_info_from_name</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[380]"></a>mbedtls_ecp_point_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[3a7]"></a>mbedtls_ecp_group_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>

<P><STRONG><a name="[3a1]"></a>mbedtls_ecp_keypair_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
</UL>

<P><STRONG><a name="[384]"></a>mbedtls_ecp_point_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[387]"></a>mbedtls_ecp_group_free</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>

<P><STRONG><a name="[39e]"></a>mbedtls_ecp_keypair_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>

<P><STRONG><a name="[390]"></a>mbedtls_ecp_copy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_ecp_copy &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
</UL>

<P><STRONG><a name="[38f]"></a>mbedtls_ecp_group_copy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_ecp_group_copy &rArr; mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_get_params
</UL>

<P><STRONG><a name="[3a8]"></a>mbedtls_ecp_set_zero</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_ecp_set_zero &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[383]"></a>mbedtls_ecp_is_zero</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_ecp_is_zero &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[3a9]"></a>mbedtls_ecp_point_cmp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>

<P><STRONG><a name="[3aa]"></a>mbedtls_ecp_point_read_string</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[3ab]"></a>mbedtls_ecp_point_write_binary</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_pubkey
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</UL>

<P><STRONG><a name="[3ad]"></a>mbedtls_ecp_point_read_binary</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
</UL>

<P><STRONG><a name="[38d]"></a>mbedtls_ecp_tls_read_point</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_public
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[38a]"></a>mbedtls_ecp_tls_write_point</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecp_tls_write_point &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
</UL>

<P><STRONG><a name="[38c]"></a>mbedtls_ecp_tls_read_group</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_tls_id
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
</UL>

<P><STRONG><a name="[389]"></a>mbedtls_ecp_tls_write_group</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_params
</UL>

<P><STRONG><a name="[381]"></a>mbedtls_ecp_check_pubkey</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[3bc]"></a>mbedtls_ecp_check_privkey</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_ecp_check_privkey &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[382]"></a>mbedtls_ecp_mul</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_compute_shared
</UL>

<P><STRONG><a name="[397]"></a>mbedtls_ecp_muladd</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
</UL>

<P><STRONG><a name="[3be]"></a>mbedtls_ecp_gen_keypair_base</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_get_type
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>

<P><STRONG><a name="[37e]"></a>mbedtls_ecp_gen_keypair</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_genkey
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_gen_public
</UL>

<P><STRONG><a name="[2f4]"></a>mbedtls_ecp_gen_key</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = mbedtls_ecp_gen_key &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
</UL>

<P><STRONG><a name="[3bf]"></a>mbedtls_ecp_check_pub_priv</STRONG> (Thumb, 178 bytes, Stack size 184 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_check_pair
</UL>

<P><STRONG><a name="[3c0]"></a>mbedtls_ecp_self_test</STRONG> (Thumb, 748 bytes, Stack size 272 bytes, ecp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_list
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[39c]"></a>mbedtls_ecp_group_load</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_key
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_genkey
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_copy
</UL>

<P><STRONG><a name="[3c5]"></a>mbedtls_entropy_add_source</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_entropy_add_source
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[2e1]"></a>mbedtls_entropy_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_entropy_init &rArr; mbedtls_entropy_add_source
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMbedTLS_Initialize
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[2e4]"></a>mbedtls_entropy_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_entropy_free &rArr; mbedtls_sha256_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Finalize
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[3c8]"></a>mbedtls_entropy_update_manual</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[3ca]"></a>mbedtls_entropy_gather</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[90]"></a>mbedtls_entropy_func</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = mbedtls_entropy_func &rArr; entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_pkcs11_mbedtls.o(.text)
</UL>
<P><STRONG><a name="[3cc]"></a>mbedtls_entropy_source_self_test</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test_check_bits
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test_gather
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
</UL>

<P><STRONG><a name="[3ce]"></a>mbedtls_entropy_self_test</STRONG> (Thumb, 218 bytes, Stack size 616 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_gather
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_update_manual
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[372]"></a>mbedtls_gcm_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_gcm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
</UL>

<P><STRONG><a name="[374]"></a>mbedtls_gcm_setkey</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gen_table
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_aes_setkey_wrap
</UL>

<P><STRONG><a name="[363]"></a>mbedtls_gcm_starts</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_gcm_starts &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update_ad
</UL>

<P><STRONG><a name="[366]"></a>mbedtls_gcm_update</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>

<P><STRONG><a name="[369]"></a>mbedtls_gcm_finish</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mbedtls_gcm_finish &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_check_tag
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_write_tag
</UL>

<P><STRONG><a name="[36f]"></a>mbedtls_gcm_crypt_and_tag</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
</UL>

<P><STRONG><a name="[371]"></a>mbedtls_gcm_auth_decrypt</STRONG> (Thumb, 112 bytes, Stack size 104 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
</UL>

<P><STRONG><a name="[373]"></a>mbedtls_gcm_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_gcm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
</UL>

<P><STRONG><a name="[3d3]"></a>mbedtls_gcm_self_test</STRONG> (Thumb, 1274 bytes, Stack size 536 bytes, gcm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[5da]"></a>mbedtls_md_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[3d5]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_string
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_signature
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
</UL>

<P><STRONG><a name="[3d4]"></a>mbedtls_md_info_from_string</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[3da]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
</UL>

<P><STRONG><a name="[3d6]"></a>mbedtls_md_free</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
</UL>

<P><STRONG><a name="[5db]"></a>mbedtls_md_clone</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>mbedtls_md_setup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_md_setup &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[4b9]"></a>mbedtls_md_starts</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
</UL>

<P><STRONG><a name="[4ba]"></a>mbedtls_md_update</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
</UL>

<P><STRONG><a name="[4bb]"></a>mbedtls_md_finish</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
</UL>

<P><STRONG><a name="[4e4]"></a>mbedtls_md</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_signature
</UL>

<P><STRONG><a name="[3d8]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_md_hmac_starts &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[3db]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[3dc]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[473]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>

<P><STRONG><a name="[3d9]"></a>mbedtls_md_hmac</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
</UL>

<P><STRONG><a name="[47a]"></a>mbedtls_md_process</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_process
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[3fa]"></a>mbedtls_md_get_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_signature
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
</UL>

<P><STRONG><a name="[5dc]"></a>mbedtls_md_get_type</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[5dd]"></a>mbedtls_md_get_name</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>mbedtls_oid_get_attr_short_name</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x520_attr_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</UL>

<P><STRONG><a name="[3e5]"></a>mbedtls_oid_get_x509_ext_type</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_x509_ext_type &rArr; oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[3e7]"></a>mbedtls_oid_get_extended_key_usage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_ext_key_usage_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
</UL>

<P><STRONG><a name="[3e9]"></a>mbedtls_oid_get_sig_alg_desc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[3ea]"></a>mbedtls_oid_get_sig_alg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[5de]"></a>mbedtls_oid_get_oid_by_sig_alg</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, oid.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>mbedtls_oid_get_pk_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_pk_alg &rArr; oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[419]"></a>mbedtls_oid_get_oid_by_pk_alg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey_der
</UL>

<P><STRONG><a name="[3ee]"></a>mbedtls_oid_get_ec_grp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_ec_grp &rArr; oid_grp_id_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_grp_id_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>

<P><STRONG><a name="[416]"></a>mbedtls_oid_get_oid_by_ec_grp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_oid_get_oid_by_ec_grp
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_param
</UL>

<P><STRONG><a name="[3f0]"></a>mbedtls_oid_get_cipher_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_cipher_alg_from_asn1
</UL>

<P><STRONG><a name="[3f2]"></a>mbedtls_oid_get_md_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_alg_from_asn1
</UL>

<P><STRONG><a name="[42d]"></a>mbedtls_oid_get_oid_by_md</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_oid_get_oid_by_md
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
</UL>

<P><STRONG><a name="[3f4]"></a>mbedtls_oid_get_md_hmac</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_hmac_from_asn1
</UL>

<P><STRONG><a name="[3f5]"></a>mbedtls_oid_get_numeric_string</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[411]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[3f6]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_pem_read_buffer &rArr; mbedtls_base64_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[3f8]"></a>mbedtls_pem_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_pem_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[2ea]"></a>mbedtls_pk_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
</UL>

<P><STRONG><a name="[2e7]"></a>mbedtls_pk_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_pk_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CloseSession
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[2f2]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
</UL>

<P><STRONG><a name="[2f3]"></a>mbedtls_pk_setup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[5df]"></a>mbedtls_pk_setup_rsa_alt</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>mbedtls_pk_can_do</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[2cc]"></a>mbedtls_pk_verify</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Verify
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvVerifySignature
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[3fb]"></a>mbedtls_pk_verify_ext</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_signature
</UL>

<P><STRONG><a name="[2f1]"></a>mbedtls_pk_sign</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_pk_sign &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Sign
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[5e0]"></a>mbedtls_pk_decrypt</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[5e1]"></a>mbedtls_pk_encrypt</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[5e2]"></a>mbedtls_pk_check_pair</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[4cd]"></a>mbedtls_pk_get_bitlen</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
</UL>

<P><STRONG><a name="[5e3]"></a>mbedtls_pk_debug</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>mbedtls_pk_get_name</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[2ee]"></a>mbedtls_pk_get_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey_der
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[40d]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[2eb]"></a>mbedtls_pk_parse_key</STRONG> (Thumb, 644 bytes, Stack size 64 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
</UL>

<P><STRONG><a name="[2ec]"></a>mbedtls_pk_parse_public_key</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mbedtls_pk_parse_public_key &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_VerifyInit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
</UL>

<P><STRONG><a name="[417]"></a>mbedtls_pk_write_pubkey</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, pkwrite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_pubkey
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_rsa_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey_der
</UL>

<P><STRONG><a name="[418]"></a>mbedtls_pk_write_pubkey_der</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, pkwrite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_algorithm_identifier
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_param
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_pk_alg
</UL>

<P><STRONG><a name="[2f5]"></a>mbedtls_pk_write_key_der</STRONG> (Thumb, 818 bytes, Stack size 64 bytes, pkwrite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mbedtls_pk_write_key_der &rArr; pk_write_ec_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_int
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export_crt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_param
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
</UL>

<P><STRONG><a name="[310]"></a>mbedtls_calloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_store_named_data
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_alloc_wrap
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_alloc_wrap
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_alloc_wrap
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[314]"></a>mbedtls_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_store_named_data
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data_list
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_free_wrap
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_free_wrap
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_free_wrap
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_key_cert_free
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[2cf]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_ConfigureHeap
</UL>

<P><STRONG><a name="[5e4]"></a>mbedtls_platform_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, platform.o(.text), UNUSED)

<P><STRONG><a name="[5e5]"></a>mbedtls_platform_teardown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>mbedtls_platform_zeroize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, platform_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_free_wrap
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
</UL>

<P><STRONG><a name="[41b]"></a>mbedtls_rsa_import</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>

<P><STRONG><a name="[409]"></a>mbedtls_rsa_import_raw</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_rsa_import_raw &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[40a]"></a>mbedtls_rsa_complete</STRONG> (Thumb, 430 bytes, Stack size 64 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>

<P><STRONG><a name="[420]"></a>mbedtls_rsa_export_raw</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>

<P><STRONG><a name="[413]"></a>mbedtls_rsa_export</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_rsa_export &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_rsa_pubkey
</UL>

<P><STRONG><a name="[41a]"></a>mbedtls_rsa_export_crt</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_rsa_export_crt &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
</UL>

<P><STRONG><a name="[421]"></a>mbedtls_rsa_set_padding</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>

<P><STRONG><a name="[403]"></a>mbedtls_rsa_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_set_padding
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>

<P><STRONG><a name="[3fd]"></a>mbedtls_rsa_get_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_get_bitlen
</UL>

<P><STRONG><a name="[404]"></a>mbedtls_rsa_free</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_copy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[40b]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; rsa_check_context &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[422]"></a>mbedtls_rsa_check_privkey</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[425]"></a>mbedtls_rsa_gen_key</STRONG> (Thumb, 596 bytes, Stack size 72 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_swap
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[402]"></a>mbedtls_rsa_check_pub_priv</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</UL>

<P><STRONG><a name="[427]"></a>mbedtls_rsa_public</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
</UL>

<P><STRONG><a name="[429]"></a>mbedtls_rsa_private</STRONG> (Thumb, 840 bytes, Stack size 168 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
</UL>

<P><STRONG><a name="[42a]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[401]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>

<P><STRONG><a name="[42b]"></a>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</STRONG> (Thumb, 326 bytes, Stack size 320 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[400]"></a>mbedtls_rsa_pkcs1_decrypt</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>

<P><STRONG><a name="[42e]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_safer_memcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[3ff]"></a>mbedtls_rsa_pkcs1_sign</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>

<P><STRONG><a name="[430]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[3fe]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>

<P><STRONG><a name="[431]"></a>mbedtls_rsa_copy</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[433]"></a>mbedtls_rsa_self_test</STRONG> (Thumb, 630 bytes, Stack size 424 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[41d]"></a>mbedtls_rsa_deduce_primes</STRONG> (Thumb, 530 bytes, Stack size 128 bytes, rsa_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[41e]"></a>mbedtls_rsa_deduce_private_exponent</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, rsa_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mbedtls_rsa_deduce_private_exponent &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[424]"></a>mbedtls_rsa_validate_crt</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, rsa_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mbedtls_rsa_validate_crt &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[423]"></a>mbedtls_rsa_validate_params</STRONG> (Thumb, 514 bytes, Stack size 64 bytes, rsa_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[41f]"></a>mbedtls_rsa_deduce_crt</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, rsa_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mbedtls_rsa_deduce_crt &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_gen_key
</UL>

<P><STRONG><a name="[2d1]"></a>mbedtls_sha1_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_SignatureVerificationStart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
</UL>

<P><STRONG><a name="[3de]"></a>mbedtls_sha1_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha1_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
</UL>

<P><STRONG><a name="[3dd]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
</UL>

<P><STRONG><a name="[2d2]"></a>mbedtls_sha1_starts_ret</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sha1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_SignatureVerificationStart
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
</UL>

<P><STRONG><a name="[3df]"></a>mbedtls_internal_sha1_process</STRONG> (Thumb, 5600 bytes, Stack size 92 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_internal_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
</UL>

<P><STRONG><a name="[2d6]"></a>mbedtls_sha1_update_ret</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_sha1_update_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_SignatureVerificationUpdate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
</UL>

<P><STRONG><a name="[2d9]"></a>mbedtls_sha1_finish_ret</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mbedtls_sha1_finish_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_SignatureVerificationFinal
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
</UL>

<P><STRONG><a name="[c1]"></a>mbedtls_sha1_ret</STRONG> (Thumb, 72 bytes, Stack size 112 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = mbedtls_sha1_ret &rArr; mbedtls_sha1_update_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[434]"></a>mbedtls_sha1_self_test</STRONG> (Thumb, 210 bytes, Stack size 1160 bytes, sha1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2d3]"></a>mbedtls_sha256_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_SignatureVerificationStart
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestInit
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
</UL>

<P><STRONG><a name="[2e8]"></a>mbedtls_sha256_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha256_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_free
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CloseSession
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
</UL>

<P><STRONG><a name="[3e0]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[2d4]"></a>mbedtls_sha256_starts_ret</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_SignatureVerificationStart
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
</UL>

<P><STRONG><a name="[3e1]"></a>mbedtls_internal_sha256_process</STRONG> (Thumb, 3600 bytes, Stack size 312 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_internal_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
</UL>

<P><STRONG><a name="[2d7]"></a>mbedtls_sha256_update_ret</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_SignatureVerificationUpdate
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestUpdate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha256
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
</UL>

<P><STRONG><a name="[2da]"></a>mbedtls_sha256_finish_ret</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_SignatureVerificationFinal
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_DigestFinal
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
</UL>

<P><STRONG><a name="[3c7]"></a>mbedtls_sha256_ret</STRONG> (Thumb, 86 bytes, Stack size 136 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>

<P><STRONG><a name="[435]"></a>mbedtls_sha256_self_test</STRONG> (Thumb, 288 bytes, Stack size 176 bytes, sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[437]"></a>mbedtls_ssl_ciphersuite_from_id</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
</UL>

<P><STRONG><a name="[436]"></a>mbedtls_ssl_list_ciphersuites</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[438]"></a>mbedtls_ssl_ciphersuite_from_string</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssl_ciphersuites.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_id
</UL>

<P><STRONG><a name="[439]"></a>mbedtls_ssl_get_ciphersuite_name</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_ciphersuites.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite
</UL>

<P><STRONG><a name="[43a]"></a>mbedtls_ssl_get_ciphersuite_id</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl_ciphersuites.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_string
</UL>

<P><STRONG><a name="[45e]"></a>mbedtls_ssl_get_ciphersuite_sig_pk_alg</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[5e6]"></a>mbedtls_ssl_get_ciphersuite_sig_alg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text), UNUSED)

<P><STRONG><a name="[444]"></a>mbedtls_ssl_ciphersuite_uses_ec</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[466]"></a>mbedtls_ssl_handshake_client_step</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>

<P><STRONG><a name="[494]"></a>mbedtls_ssl_sig_hash_set_const_hash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[46f]"></a>mbedtls_ssl_session_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[455]"></a>mbedtls_ssl_derive_keys</STRONG> (Thumb, 1058 bytes, Stack size 440 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = mbedtls_ssl_derive_keys &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[441]"></a>mbedtls_ssl_write_version</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_write_version
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[47b]"></a>mbedtls_ssl_fetch_input</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_fetch_input &rArr; ssl_check_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
</UL>

<P><STRONG><a name="[467]"></a>mbedtls_ssl_flush_output</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_flush_output
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_out_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[47e]"></a>mbedtls_ssl_write_record</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_out_pointers
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>

<P><STRONG><a name="[449]"></a>mbedtls_ssl_write_handshake_msg</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[47f]"></a>mbedtls_ssl_prepare_handshake_record</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_prepare_handshake_record
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_hs_total_len
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>

<P><STRONG><a name="[488]"></a>mbedtls_ssl_update_handshake_status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_update_handshake_status
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[44b]"></a>mbedtls_ssl_send_alert_message</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypt_then_mac_ext
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
</UL>

<P><STRONG><a name="[453]"></a>mbedtls_ssl_read_version</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[483]"></a>mbedtls_ssl_handle_message_type</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_handle_message_type &rArr; mbedtls_ssl_prepare_handshake_record
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[452]"></a>mbedtls_ssl_read_record</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_consume_current_message
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_record_is_in_progress
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[489]"></a>mbedtls_ssl_send_fatal_handshake_failure</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>

<P><STRONG><a name="[469]"></a>mbedtls_ssl_write_certificate</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mbedtls_ssl_write_certificate &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[48a]"></a>mbedtls_ssl_check_cert_usage</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbedtls_ssl_check_cert_usage &rArr; mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[457]"></a>mbedtls_ssl_check_curve</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>

<P><STRONG><a name="[468]"></a>mbedtls_ssl_parse_certificate</STRONG> (Thumb, 956 bytes, Stack size 56 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[46a]"></a>mbedtls_ssl_write_change_cipher_spec</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[46c]"></a>mbedtls_ssl_parse_change_cipher_spec</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_in_pointers
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[454]"></a>mbedtls_ssl_optimize_checksum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[48f]"></a>mbedtls_ssl_reset_checksum</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>

<P><STRONG><a name="[490]"></a>mbedtls_ssl_transform_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_md_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>

<P><STRONG><a name="[491]"></a>mbedtls_ssl_handshake_free</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>

<P><STRONG><a name="[46e]"></a>mbedtls_ssl_handshake_wrapup</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[46b]"></a>mbedtls_ssl_write_finished</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_out_pointers
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[46d]"></a>mbedtls_ssl_parse_finished</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[496]"></a>mbedtls_ssl_session_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_session_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[498]"></a>mbedtls_ssl_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[49a]"></a>mbedtls_ssl_setup</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_in_out_pointers
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[49d]"></a>mbedtls_ssl_session_reset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[4b6]"></a>mbedtls_ssl_conf_endpoint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[4b7]"></a>mbedtls_ssl_conf_transport</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[4f8]"></a>mbedtls_ssl_conf_authmode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[4f7]"></a>mbedtls_ssl_conf_verify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[4f9]"></a>mbedtls_ssl_conf_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[5e7]"></a>mbedtls_ssl_conf_dbg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[4fb]"></a>mbedtls_ssl_set_bio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_set_bio
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[5e8]"></a>mbedtls_ssl_conf_read_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[49e]"></a>mbedtls_ssl_set_timer_cb</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
</UL>

<P><STRONG><a name="[49f]"></a>mbedtls_ssl_set_session</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[5e9]"></a>mbedtls_ssl_conf_ciphersuites</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5ea]"></a>mbedtls_ssl_conf_ciphersuites_for_version</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5eb]"></a>mbedtls_ssl_conf_cert_profile</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[4a1]"></a>mbedtls_ssl_conf_own_cert</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ssl_conf_own_cert &rArr; ssl_append_key_cert &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
</UL>

<P><STRONG><a name="[4fa]"></a>mbedtls_ssl_conf_ca_chain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[4a2]"></a>mbedtls_ssl_set_hs_own_cert</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</UL>

<P><STRONG><a name="[5ec]"></a>mbedtls_ssl_set_hs_ca_chain</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5ed]"></a>mbedtls_ssl_set_hs_authmode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5ee]"></a>mbedtls_ssl_conf_sig_hashes</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5ef]"></a>mbedtls_ssl_conf_curves</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[4a3]"></a>mbedtls_ssl_set_hostname</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ssl_set_hostname &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[5f0]"></a>mbedtls_ssl_conf_sni</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[4a4]"></a>mbedtls_ssl_conf_alpn_protocols</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_conf_alpn_protocols
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[5f1]"></a>mbedtls_ssl_get_alpn_protocol</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5f2]"></a>mbedtls_ssl_conf_max_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5f3]"></a>mbedtls_ssl_conf_min_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5f4]"></a>mbedtls_ssl_conf_encrypt_then_mac</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5f5]"></a>mbedtls_ssl_conf_extended_master_secret</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[4a5]"></a>mbedtls_ssl_conf_max_frag_len</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mfl_code_to_length
</UL>

<P><STRONG><a name="[5f6]"></a>mbedtls_ssl_conf_legacy_renegotiation</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5f7]"></a>mbedtls_ssl_get_bytes_avail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5f8]"></a>mbedtls_ssl_check_pending</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5f9]"></a>mbedtls_ssl_get_verify_result</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[4a7]"></a>mbedtls_ssl_get_ciphersuite</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
</UL>

<P><STRONG><a name="[5fa]"></a>mbedtls_ssl_get_version</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[4a8]"></a>mbedtls_ssl_get_record_expansion</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
</UL>

<P><STRONG><a name="[4a9]"></a>mbedtls_ssl_get_max_frag_len</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_get_max_frag_len
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mfl_code_to_length
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_out_record_payload
</UL>

<P><STRONG><a name="[4aa]"></a>mbedtls_ssl_get_max_out_record_payload</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_get_max_out_record_payload &rArr; mbedtls_ssl_get_max_frag_len
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_frag_len
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>

<P><STRONG><a name="[5fb]"></a>mbedtls_ssl_get_peer_cert</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[4ab]"></a>mbedtls_ssl_get_session</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[4ac]"></a>mbedtls_ssl_handshake_step</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>

<P><STRONG><a name="[4ad]"></a>mbedtls_ssl_handshake</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>

<P><STRONG><a name="[4ae]"></a>mbedtls_ssl_read</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Recv
</UL>

<P><STRONG><a name="[4b0]"></a>mbedtls_ssl_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Send
</UL>

<P><STRONG><a name="[4b1]"></a>mbedtls_ssl_close_notify</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
</UL>

<P><STRONG><a name="[4b3]"></a>mbedtls_ssl_free</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
</UL>

<P><STRONG><a name="[4b4]"></a>mbedtls_ssl_config_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_config_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[4b5]"></a>mbedtls_ssl_config_defaults</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_ssl_config_defaults &rArr; mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_transport
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_endpoint
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[4b8]"></a>mbedtls_ssl_config_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_config_free &rArr; ssl_key_cert_free &rArr; mbedtls_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_key_cert_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
</UL>

<P><STRONG><a name="[465]"></a>mbedtls_ssl_sig_from_pk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_sig_from_pk &rArr; mbedtls_pk_can_do
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[5fc]"></a>mbedtls_ssl_sig_from_pk_alg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[45b]"></a>mbedtls_ssl_pk_alg_from_sig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[5fd]"></a>mbedtls_ssl_sig_hash_set_find</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[5fe]"></a>mbedtls_ssl_sig_hash_set_add</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>mbedtls_ssl_md_alg_from_hash</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[43d]"></a>mbedtls_ssl_hash_from_md_alg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
</UL>

<P><STRONG><a name="[45c]"></a>mbedtls_ssl_check_sig_hash</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
</UL>

<P><STRONG><a name="[5ff]"></a>mbedtls_ssl_set_calc_verify_md</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[45f]"></a>mbedtls_ssl_get_key_exchange_md_tls1_2</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mbedtls_ssl_get_key_exchange_md_tls1_2 &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[2e0]"></a>mbedtls_threading_set_alt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, threading.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_threading_set_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMbedTLS_Initialize
</UL>

<P><STRONG><a name="[600]"></a>mbedtls_threading_free_alt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, threading.o(.text), UNUSED)

<P><STRONG><a name="[4bc]"></a>mbedtls_x509_get_serial</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_x509_get_serial &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4bd]"></a>mbedtls_x509_get_alg_null</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, x509.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
</UL>

<P><STRONG><a name="[4be]"></a>mbedtls_x509_get_alg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_get_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4c0]"></a>mbedtls_x509_get_name</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_x509_get_name &rArr; x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4c4]"></a>mbedtls_x509_get_time</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_date_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
</UL>

<P><STRONG><a name="[4c5]"></a>mbedtls_x509_get_sig</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_x509_get_sig &rArr; mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4c6]"></a>mbedtls_x509_get_sig_alg</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_get_sig_alg &rArr; mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4c7]"></a>mbedtls_x509_get_ext</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[4c8]"></a>mbedtls_x509_dn_gets</STRONG> (Thumb, 274 bytes, Stack size 312 bytes, x509.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[4c9]"></a>mbedtls_x509_serial_gets</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, x509.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[4ca]"></a>mbedtls_x509_sig_alg_gets</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, x509.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[4cb]"></a>mbedtls_x509_key_size_helper</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, x509.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[4e7]"></a>mbedtls_x509_time_is_past</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[4e8]"></a>mbedtls_x509_time_is_future</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[601]"></a>mbedtls_x509_self_test</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>mbedtls_x509_crt_free</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_x509_crt_free &rArr; mbedtls_pk_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvVerifySignature
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[2ca]"></a>mbedtls_x509_crt_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_x509_crt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvVerifySignature
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[471]"></a>mbedtls_x509_crt_parse_der</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[2cb]"></a>mbedtls_x509_crt_parse</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_CreateObject
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvVerifySignature
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
</UL>

<P><STRONG><a name="[4db]"></a>mbedtls_x509_crt_info</STRONG> (Thumb, 1608 bytes, Stack size 80 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_name
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_subject_alt_name
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[4de]"></a>mbedtls_x509_crt_verify_info</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[48b]"></a>mbedtls_x509_crt_check_key_usage</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[48c]"></a>mbedtls_x509_crt_check_extended_key_usage</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_x509_crt_check_extended_key_usage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
</UL>

<P><STRONG><a name="[48d]"></a>mbedtls_x509_crt_verify_with_profile</STRONG> (Thumb, 192 bytes, Stack size 136 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_chain &rArr; x509_crt_find_parent &rArr; x509_crt_find_parent_in &rArr; x509_crt_check_signature &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_merge_flags_with_cb
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_name
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[4f1]"></a>mbedtls_x509_crt_verify</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[4f5]"></a>TLS_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, aws_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TLS_Init &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
</UL>

<P><STRONG><a name="[4f6]"></a>TLS_Connect</STRONG> (Thumb, 626 bytes, Stack size 24 bytes, aws_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_ConfigureHeap
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_alpn_protocols
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_verify
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
</UL>

<P><STRONG><a name="[4fc]"></a>TLS_Recv</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, aws_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>

<P><STRONG><a name="[4fd]"></a>TLS_Send</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, aws_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = TLS_Send &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
</UL>

<P><STRONG><a name="[4fe]"></a>TLS_Cleanup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, aws_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFreeContext
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>

<P><STRONG><a name="[115]"></a>WIFI_On</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, aws_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = WIFI_On &rArr; ESP_WIFI_Init &rArr; ESP_WIFI_Reset &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWifiConnect
</UL>

<P><STRONG><a name="[602]"></a>WIFI_Off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aws_wifi.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>WIFI_ConnectAP</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, aws_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = WIFI_ConnectAP &rArr; ESP_WIFI_Connect &rArr; ESP_WIFI_Reset &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_IsConnected
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetNetStatus
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Disconnect
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWifiConnect
</UL>

<P><STRONG><a name="[504]"></a>WIFI_Disconnect</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, aws_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Disconnect
</UL>

<P><STRONG><a name="[505]"></a>WIFI_Reset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, aws_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Reset
</UL>

<P><STRONG><a name="[507]"></a>WIFI_Scan</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, aws_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Scan
</UL>

<P><STRONG><a name="[603]"></a>WIFI_SetMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_wifi.o(.text), UNUSED)

<P><STRONG><a name="[604]"></a>WIFI_GetMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_wifi.o(.text), UNUSED)

<P><STRONG><a name="[605]"></a>WIFI_NetworkAdd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_wifi.o(.text), UNUSED)

<P><STRONG><a name="[606]"></a>WIFI_NetworkGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_wifi.o(.text), UNUSED)

<P><STRONG><a name="[607]"></a>WIFI_NetworkDelete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_wifi.o(.text), UNUSED)

<P><STRONG><a name="[509]"></a>WIFI_Ping</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, aws_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Ping
</UL>

<P><STRONG><a name="[117]"></a>WIFI_GetIP</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, aws_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WIFI_GetIP &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWifiConnect
</UL>

<P><STRONG><a name="[50b]"></a>WIFI_GetMAC</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, aws_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[50c]"></a>WIFI_GetHostIP</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, aws_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetHostIP
</UL>

<P><STRONG><a name="[608]"></a>WIFI_StartAP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aws_wifi.o(.text), UNUSED)

<P><STRONG><a name="[609]"></a>WIFI_StopAP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aws_wifi.o(.text), UNUSED)

<P><STRONG><a name="[60a]"></a>WIFI_ConfigureAP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_wifi.o(.text), UNUSED)

<P><STRONG><a name="[60b]"></a>WIFI_SetPMMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_wifi.o(.text), UNUSED)

<P><STRONG><a name="[60c]"></a>WIFI_GetPMMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aws_wifi.o(.text), UNUSED)

<P><STRONG><a name="[50e]"></a>WIFI_IsConnected</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, aws_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_IsConnected
</UL>

<P><STRONG><a name="[1df]"></a>SOCKETS_Socket</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SOCKETS_Socket &rArr; prvGetFreeSocket &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFreeSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_TCP
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_InvalidTooManySockets
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_InvalidInputParams
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpSocketHelper
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupConnection
</UL>

<P><STRONG><a name="[60d]"></a>SOCKETS_Accept</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aws_secure_sockets.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>SOCKETS_Connect</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_IsConnected
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_StartClient
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsValidSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTrustedServerCertificate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Connect_InvalidParams
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnect_InvalidAddressLength
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTriggerWrongRootCA
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelper
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupConnection
</UL>

<P><STRONG><a name="[1ec]"></a>SOCKETS_Recv</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Recv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkRecv
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsValidSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvThreadSafeDifferentSocketsDifferentTasks
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Shutdown
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Close
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecv_Invalid
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTwoSecureConnections
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvShutdownHelper
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecvHelper
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvManageConnections
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGracefulSocketClose
</UL>

<P><STRONG><a name="[1ea]"></a>SOCKETS_Send</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = SOCKETS_Send &rArr; TLS_Send &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkSend
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsValidSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_CloseWithoutReceiving
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownWithoutReceiving
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClientTxTask
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvThreadSafeDifferentSocketsDifferentTasks
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Close
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSend_Invalid
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendHelper
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTSendCallback
</UL>

<P><STRONG><a name="[1ee]"></a>SOCKETS_Shutdown</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SOCKETS_Shutdown &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsValidSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownInvalidParams
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownWithoutReceiving
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Shutdown
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvShutdownHelper
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGracefulSocketClose
</UL>

<P><STRONG><a name="[1dc]"></a>SOCKETS_Close</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Cleanup
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_StopClient
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Reset_Ipd
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetConnStatus
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsValidSocket
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_TEAR_DOWN
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_InvalidTooManySockets
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_CloseInvalidParams
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGracefulSocketClose
</UL>

<P><STRONG><a name="[1e1]"></a>SOCKETS_SetSockOpt</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SOCKETS_SetSockOpt &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsValidSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTrustedServerCertificate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOpt_InvalidParams
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTriggerWrongRootCA
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingConnect
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOptHelper
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAwsIotBrokerConnectHelper
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSecureConnectHelper
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupConnection
</UL>

<P><STRONG><a name="[1e3]"></a>SOCKETS_GetHostByName</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SOCKETS_GetHostByName &rArr; ESP_WIFI_GetHostIP &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetHostIP
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTriggerWrongRootCA
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAwsIotBrokerConnectHelper
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupConnection
</UL>

<P><STRONG><a name="[27f]"></a>SOCKETS_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SOCKETS_Init &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_Init
</UL>

<P><STRONG><a name="[60e]"></a>ulRand</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aws_secure_sockets.o(.text), UNUSED)

<P><STRONG><a name="[528]"></a>RX_BUF_PUSH</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, esp8266_wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[52b]"></a>RX_BUF_POP</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, esp8266_wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
</UL>

<P><STRONG><a name="[527]"></a>RX_BUF_FULL</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, esp8266_wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[52a]"></a>RX_BUF_COUNT</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, esp8266_wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
</UL>

<P><STRONG><a name="[522]"></a>ESP_Platform_Init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ESP_Platform_Init &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetTimeoutCnt
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Init
</UL>

<P><STRONG><a name="[525]"></a>ESP_IO_Send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ESP_IO_Send &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Send
</UL>

<P><STRONG><a name="[49]"></a>UART1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UART1_IRQHandler &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_BUF_FULL
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_BUF_PUSH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[529]"></a>ESP_IO_Recv</STRONG> (Thumb, 888 bytes, Stack size 120 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_BUF_COUNT
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_BUF_POP
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_StartClient
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Send
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Recv
</UL>

<P><STRONG><a name="[506]"></a>ESP_WIFI_Reset</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ESP_WIFI_Reset &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Reset
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Init
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Connect
</UL>

<P><STRONG><a name="[4ff]"></a>ESP_WIFI_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ESP_WIFI_Init &rArr; ESP_WIFI_Reset &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Reset
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Platform_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_On
</UL>

<P><STRONG><a name="[52d]"></a>ESP_WIFI_SetMultiConn</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ESP_WIFI_SetMultiConn &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Connect
</UL>

<P><STRONG><a name="[502]"></a>ESP_WIFI_Connect</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ESP_WIFI_Connect &rArr; ESP_WIFI_Reset &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Reset
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_SetMultiConn
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>

<P><STRONG><a name="[501]"></a>ESP_WIFI_Disconnect</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ESP_WIFI_Disconnect &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Disconnect
</UL>

<P><STRONG><a name="[508]"></a>ESP_WIFI_Scan</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, esp8266_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ParseAccessPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Scan
</UL>

<P><STRONG><a name="[500]"></a>ESP_WIFI_IsConnected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, esp8266_wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_IsConnected
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
</UL>

<P><STRONG><a name="[503]"></a>ESP_WIFI_GetNetStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ESP_WIFI_GetNetStatus &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ParseAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>

<P><STRONG><a name="[518]"></a>ESP_WIFI_Reset_Ipd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, esp8266_wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>

<P><STRONG><a name="[513]"></a>ESP_WIFI_Get_Ipd_Size</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, esp8266_wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkSend
</UL>

<P><STRONG><a name="[516]"></a>ESP_WIFI_GetConnStatus</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ESP_WIFI_GetConnStatus &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>

<P><STRONG><a name="[50a]"></a>ESP_WIFI_Ping</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, esp8266_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Ping
</UL>

<P><STRONG><a name="[50d]"></a>ESP_WIFI_GetHostIP</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ESP_WIFI_GetHostIP &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseIpAddr
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetHostIP
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_GetHostByName
</UL>

<P><STRONG><a name="[515]"></a>ESP_WIFI_StartClient</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ESP_WIFI_StartClient &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
</UL>

<P><STRONG><a name="[517]"></a>ESP_WIFI_StopClient</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ESP_WIFI_StopClient &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>

<P><STRONG><a name="[512]"></a>ESP_WIFI_Send</STRONG> (Thumb, 792 bytes, Stack size 72 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ESP_WIFI_Send &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Send
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkSend
</UL>

<P><STRONG><a name="[514]"></a>ESP_WIFI_Recv</STRONG> (Thumb, 744 bytes, Stack size 64 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ESP_WIFI_Recv &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNetworkRecv
</UL>

<P><STRONG><a name="[52f]"></a>UnityPrintNumberHex</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintLen
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>

<P><STRONG><a name="[531]"></a>UnityPrint</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberHex
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertGreaterNumber
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualIntArray
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityEnd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualMemory
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIgnoreTest
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityConcludeFixtureTest
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceTestRun
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIgnore
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualStringArray
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertNumbersWithin
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatSpecial
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatsWithin
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualFloatArray
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertBits
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityConcludeTest
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintFloat
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIsOneArrayNull
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintExpectedAndActualStringsLen
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintExpectedAndActualStrings
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsBegin
</UL>

<P><STRONG><a name="[532]"></a>UnityPrintLen</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberHex
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintExpectedAndActualStringsLen
</UL>

<P><STRONG><a name="[533]"></a>UnityPrintNumberUnsigned</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UnityPrintNumberUnsigned &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualIntArray
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualMemory
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceTestRun
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualStringArray
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualFloatArray
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumber
</UL>

<P><STRONG><a name="[534]"></a>UnityPrintNumber</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UnityPrintNumber &rArr; UnityPrintNumberUnsigned &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityEnd
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsBegin
</UL>

<P><STRONG><a name="[535]"></a>UnityPrintNumberByStyle</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UnityPrintNumberByStyle &rArr; UnityPrintNumber &rArr; UnityPrintNumberUnsigned &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumber
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberUnsigned
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberHex
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertGreaterNumber
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualIntArray
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualMemory
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertNumbersWithin
</UL>

<P><STRONG><a name="[536]"></a>UnityPrintMask</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertBits
</UL>

<P><STRONG><a name="[537]"></a>UnityPrintFloat</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatSpecial
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatsWithin
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualFloatArray
</UL>

<P><STRONG><a name="[53c]"></a>UnityConcludeTest</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityDefaultTestRun
</UL>

<P><STRONG><a name="[541]"></a>UnityAssertBits</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintMask
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>

<P><STRONG><a name="[1dd]"></a>UnityAssertEqualNumber</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UnityAssertEqualNumber &rArr; UnityTestResultsFailBegin &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_TEAR_DOWN
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_TCP
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_InvalidTooManySockets
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_InvalidInputParams
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_CloseInvalidParams
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_CloseWithoutReceiving
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownInvalidParams
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownWithoutReceiving
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTrustedServerCertificate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Connect_InvalidParams
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnect_InvalidAddressLength
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOpt_InvalidParams
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Shutdown
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Close
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Recv_ByteByByte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSend_Invalid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecv_Invalid
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTriggerWrongRootCA
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTwoSecureConnections
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_htons_HappyCase_
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_inet_addr_quick_HappyCase_
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStartTCPEchoClientTasks_DifferentSockets
</UL>

<P><STRONG><a name="[22e]"></a>UnityAssertGreaterNumber</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UnityAssertGreaterNumber &rArr; UnityTestResultsFailBegin &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_CloseWithoutReceiving
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownWithoutReceiving
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
</UL>

<P><STRONG><a name="[1f5]"></a>UnityAssertSmallerNumber</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UnityAssertSmallerNumber &rArr; UnityTestResultsFailBegin &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTrustedServerCertificate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Connect_InvalidParams
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOpt_InvalidParams
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Shutdown
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Close
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSend_Invalid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecv_Invalid
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTriggerWrongRootCA
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingConnect
</UL>

<P><STRONG><a name="[542]"></a>UnityAssertEqualIntArray</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberUnsigned
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIsOneArrayNull
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>

<P><STRONG><a name="[544]"></a>UnityAssertEqualFloatArray</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintFloat
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberUnsigned
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFloatsWithin
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIsOneArrayNull
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>

<P><STRONG><a name="[545]"></a>UnityAssertFloatsWithin</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintFloat
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFloatsWithin
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>

<P><STRONG><a name="[546]"></a>UnityAssertFloatSpecial</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintFloat
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>

<P><STRONG><a name="[547]"></a>UnityAssertNumbersWithin</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>

<P><STRONG><a name="[548]"></a>UnityAssertEqualString</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintExpectedAndActualStrings
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>

<P><STRONG><a name="[549]"></a>UnityAssertEqualStringLen</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintExpectedAndActualStringsLen
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>

<P><STRONG><a name="[54a]"></a>UnityAssertEqualStringArray</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberUnsigned
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIsOneArrayNull
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintExpectedAndActualStrings
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>

<P><STRONG><a name="[22f]"></a>UnityAssertEqualMemory</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UnityAssertEqualMemory &rArr; UnityIsOneArrayNull &rArr; UnityTestResultsFailBegin &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberUnsigned
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIsOneArrayNull
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
</UL>

<P><STRONG><a name="[60f]"></a>UnityNumToPtr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, unity.o(.text), UNUSED)

<P><STRONG><a name="[610]"></a>UnityFloatToPtr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, unity.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>UnityFail</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_SNDTIMEO
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_TCP
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_InvalidInputParams
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownInvalidParams
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTrustedServerCertificate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Connect_InvalidParams
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnect_InvalidAddressLength
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Close
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSend_Invalid
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTriggerWrongRootCA
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingConnect
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTwoSecureConnections
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPointer_Set
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_realloc
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_free
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityMalloc_EndTest
</UL>

<P><STRONG><a name="[54b]"></a>UnityIgnore</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsBegin
</UL>

<P><STRONG><a name="[54c]"></a>UnityDefaultTestRun</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tearDown
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUp
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityConcludeTest
</UL>

<P><STRONG><a name="[27b]"></a>UnityBegin</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, unity.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RUNNER_RunTests_task
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityMain
</UL>

<P><STRONG><a name="[27c]"></a>UnityEnd</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UnityEnd &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumber
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RUNNER_RunTests_task
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityMain
</UL>

<P><STRONG><a name="[54d]"></a>setUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityDefaultTestRun
</UL>

<P><STRONG><a name="[54e]"></a>tearDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityDefaultTestRun
</UL>

<P><STRONG><a name="[550]"></a>UnityGetCommandLineOptions</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityMain
</UL>

<P><STRONG><a name="[551]"></a>UnityMain</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityEnd
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityBegin
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityGetCommandLineOptions
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceTestRun
</UL>

<P><STRONG><a name="[555]"></a>UnityConcludeFixtureTest</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, unity_fixture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UnityConcludeFixtureTest &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>

<P><STRONG><a name="[556]"></a>UnityMalloc_EndTest</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, unity_fixture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>

<P><STRONG><a name="[559]"></a>UnityPointer_UndoAllSets</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, unity_fixture.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>

<P><STRONG><a name="[558]"></a>UnityPointer_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, unity_fixture.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>

<P><STRONG><a name="[557]"></a>UnityMalloc_StartTest</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, unity_fixture.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
</UL>

<P><STRONG><a name="[1f7]"></a>UnityTestRunner</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, unity_fixture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityMalloc_StartTest
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPointer_Init
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPointer_UndoAllSets
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityMalloc_EndTest
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityConcludeFixtureTest
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;groupSelected
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSelected
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_ByteByByte_run
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SendRecv_VaryLength_run
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Send_Invalid_run
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_Invalid_run
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SockEventHandler_run
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlockingConnect_run
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_TwoSecureConnections_run
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_run
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Socket_InvalidTooManySockets_run
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SNDTIMEO_run
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_SNDTIMEO_run
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_CloseInvalidParams_run
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_CloseWithoutReceiving_run
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_ShutdownInvalidParams_run
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_ShutdownWithoutReceiving_run
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Recv_On_Unconnected_Socket_run
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_SameSocketDifferentTasks_run
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidParams_run
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidAddressLength_run
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_run
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Socket_TCP_run
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_RCVTIMEO_run
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_NonBlocking_Test_run
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_InvalidParams_run
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Shutdown_run
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Close_run
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Recv_ByteByByte_run
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_SendRecv_VaryLength_run
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidTooManySockets_run
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidInputParams_run
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Send_Invalid_run
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Recv_Invalid_run
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_htons_HappyCase_run
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_inet_addr_quick_HappyCase_run
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseInvalidParams_run
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseWithoutReceiving_run
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownInvalidParams_run
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownWithoutReceiving_run
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_On_Unconnected_Socket_run
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_SameSocketDifferentTasks_run
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_TRUSTED_SERVER_CERTIFICATE_run
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SERVER_NAME_INDICATION_run
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidParams_run
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidAddressLength_run
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_DifferentSocketsDifferentTasks_run
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_RCVTIMEO_run
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlocking_Test_run
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_InvalidParams_run
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Shutdown_run
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Close_run
</UL>

<P><STRONG><a name="[55a]"></a>UnityIgnoreTest</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;groupSelected
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSelected
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>

<P><STRONG><a name="[611]"></a>UnityMalloc_MakeMallocFailAfterCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unity_fixture.o(.text), UNUSED)

<P><STRONG><a name="[55b]"></a>unity_malloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_realloc
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_calloc
</UL>

<P><STRONG><a name="[55f]"></a>unity_free</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_memory
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isOverrun
</UL>

<P><STRONG><a name="[560]"></a>unity_calloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_malloc
</UL>

<P><STRONG><a name="[561]"></a>unity_realloc</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_malloc
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_memory
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isOverrun
</UL>

<P><STRONG><a name="[562]"></a>UnityPointer_Set</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
</UL>

<P><STRONG><a name="[348]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[432]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrand
</UL>

<P><STRONG><a name="[612]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[613]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ParseReceivedData
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_store_named_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_bitstring
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_raw_buffer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb8
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFLASH_update
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_FindObjectsInit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GetAttributeValue
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreSubscription
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteString
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_write_ec_pubkey
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_signature_to_asn1
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_self_test_entropy
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_realloc
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ParseAccessPoint
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Send
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Recv
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_curve
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Recv_ByteByByte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPublish
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckCertificate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>

<P><STRONG><a name="[486]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_consume_current_message
</UL>

<P><STRONG><a name="[614]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[615]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Recv_ByteByByte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateTxData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_dummy_source
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[616]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[617]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCalloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Unsubscribe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_alloc_wrap
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_calloc
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Recv
</UL>

<P><STRONG><a name="[28c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_On
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_OpenSession
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvVerifySignature
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTClientSocketWakeupCallback
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Init
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>

<P><STRONG><a name="[618]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_util.o(.data)
</UL>
<P><STRONG><a name="[3f7]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckCertificate
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selected
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_StartClient
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Recv
</UL>

<P><STRONG><a name="[1da]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrint
</UL>

<P><STRONG><a name="[1be]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrint
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_IsPrivateKeyValid
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2RegEx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupConnection
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitializeClientCredential
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_name
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_alpn_protocols
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_AT_Command
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_StartClient
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Send
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Recv
</UL>

<P><STRONG><a name="[11e]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xApplicationDNSQueryHook
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_ReadFile
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_SaveFile
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_GenerateKeyPair
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_string
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_name
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_string
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetHostIP
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_string
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityGetCommandLineOptions
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isOverrun
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ParseAccessPoint
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ParseAddress
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetConnStatus
</UL>

<P><STRONG><a name="[2ae]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_find_named_data
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCONNACK
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPUBACK
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedUNSUBACK
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRemoveSubscription
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPINGRESP
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeSubscriptionCallbacks
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_hmac_from_asn1
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_alg_from_asn1
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_cipher_alg_from_asn1
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_grp_id_from_asn1
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_ext_key_usage_from_asn1
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x520_attr_from_asn1
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_name
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_ee_locally_trusted
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_extended_key_usage
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>

<P><STRONG><a name="[21d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvThreadSafeDifferentSocketsDifferentTasks
</UL>

<P><STRONG><a name="[51a]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetHostIP
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ParseAccessPoint
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ParseAddress
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseApDetail
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMacAddr
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseIpAddr
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Recv
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetConnStatus
</UL>

<P><STRONG><a name="[51f]"></a>strlcpy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, strlcpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseApDetail
</UL>

<P><STRONG><a name="[15]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[4f3]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckCertificate
</UL>

<P><STRONG><a name="[566]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[576]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[51d]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMacAddr
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[51b]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseApDetail
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseIpAddr
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Recv
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetConnStatus
</UL>

<P><STRONG><a name="[1db]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_TEAR_DOWN
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_InvalidInputParams
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnect_InvalidAddressLength
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOpt_InvalidParams
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSend_Invalid
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTwoSecureConnections
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStartTCPEchoClientTasks_DifferentSockets
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityDefaultTestRun
</UL>

<P><STRONG><a name="[123]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueFullFromISR
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueEmptyFromISR
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolderFromISR
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrint
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTimerGetName
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetExpiryTime
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetPeriod
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetTimerDaemonTaskHandle
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnect_InvalidAddressLength
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckRxTxBuffers
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualString
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertGreaterNumber
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualIntArray
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ParseReceivedData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ReturnBuffer
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEncodeRemainingLength
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSizeOfRemainingLength
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRemoveSubscriptionForSubscribeOrUnsubscribeBuffer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFreeBuffer
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Unsubscribe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Periodic
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Disconnect
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTTask
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendCommandToMQTTTask
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupConnection
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTClientSocketWakeupCallback
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnConnection
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTEventCallback
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTSendCallback
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualMemory
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Socket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_GetHostByName
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStartTCPEchoClientTasks_DifferentSockets
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIgnore
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualStringArray
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualStringLen
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertNumbersWithin
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatSpecial
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatsWithin
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualFloatArray
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertBits
</UL>

<P><STRONG><a name="[619]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[580]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[564]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[61a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[563]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[61b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[568]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[af]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[567]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[565]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[ac]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[569]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[61c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[56c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[570]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[571]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[572]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[573]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[574]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[57d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f9]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[61d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[56d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[61e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[56b]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[56f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[56e]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[61f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[620]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[577]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[621]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[107]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCheckTask
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLoggingTask
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_self_test
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_self_test
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFLASH_update
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_self_test
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_self_test
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_self_test
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_self_test
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_self_test
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_self_test
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_self_test
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_self_test
</UL>

<P><STRONG><a name="[622]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[623]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[579]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[624]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1d7]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateTxData
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_numeric_string
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</UL>

<P><STRONG><a name="[625]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[626]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[57a]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[627]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[52e]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Ping
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetHostIP
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Connect
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_SetMultiConn
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_StopClient
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_StartClient
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Send
</UL>

<P><STRONG><a name="[628]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[629]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[57b]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[62a]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[62b]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[62c]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1d8]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>

<P><STRONG><a name="[56a]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[62d]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[62e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[62f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[630]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[16]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data)
</UL>
<P><STRONG><a name="[55c]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_malloc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[530]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(i.putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityEnd
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIgnoreTest
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityConcludeFixtureTest
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityMain
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceTestRun
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIgnore
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityConcludeTest
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintFloat
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintMask
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumber
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberUnsigned
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintLen
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberHex
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintExpectedAndActualStringsLen
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintExpectedAndActualStrings
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsBegin
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[29]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>trng_get</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, entropy_hardware_poll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = trng_get &rArr; PRNG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNG_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNG_Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNG_Open
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numaker_ulRand
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
</UL>

<P><STRONG><a name="[106]"></a>vCheckTask</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[10a]"></a>prvSetupHardware</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvSetupHardware &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMiscInitialization
</UL>

<P><STRONG><a name="[110]"></a>prvMiscInitialization</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvMiscInitialization &rArr; xLoggingTaskInitialize &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLoggingTaskInitialize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>prvWifiConnect</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = prvWifiConnect &rArr; WIFI_ConnectAP &rArr; ESP_WIFI_Connect &rArr; ESP_WIFI_Reset &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_On
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetIP
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ConnectAP
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationDaemonTaskStartupHook
</UL>

<P><STRONG><a name="[128]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[12c]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[12e]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[12f]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[138]"></a>prvInitialiseMutex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[143]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[13f]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[14b]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[159]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[15a]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[15c]"></a>prvInitialiseNewTask</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[164]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[161]"></a>prvDeleteTCB</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[167]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[16f]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[172]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[7f]"></a>prvIdleTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[17c]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[17d]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[18a]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[18c]"></a>prvSwitchTimerLists</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[18d]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[18e]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[18f]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[190]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[191]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[80]"></a>prvTimerTask</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = prvTimerTask &rArr; vApplicationDaemonTaskStartupHook &rArr; prvWifiConnect &rArr; WIFI_ConnectAP &rArr; ESP_WIFI_Connect &rArr; ESP_WIFI_Reset &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationDaemonTaskStartupHook
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[192]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[195]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[81]"></a>prvTaskExitError</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[1a9]"></a>prvTestWaitCondition</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[1af]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1ae]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[ef]"></a>stackDump</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[f0]"></a>SendChar_ToUART</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[f1]"></a>SendChar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[f2]"></a>GetChar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[1c6]"></a>dump_ecc_reg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init_curve
</UL>

<P><STRONG><a name="[1bf]"></a>ch2hex</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2RegEx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
</UL>

<P><STRONG><a name="[1bd]"></a>Hex2Reg</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch2hex
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_VerifySignature
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_GenerateSignature
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_GenerateSecretZ
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Mutiply
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_GeneratePublicKey
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init_curve
</UL>

<P><STRONG><a name="[1c0]"></a>Hex2RegEx</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch2hex
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_GenerateSecretZ
</UL>

<P><STRONG><a name="[1c2]"></a>get_Nth_nibble_char</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg2Hex
</UL>

<P><STRONG><a name="[1c1]"></a>Reg2Hex</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Nth_nibble_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_VerifySignature
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_GenerateSignature
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_GenerateSecretZ
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Mutiply
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_GeneratePublicKey
</UL>

<P><STRONG><a name="[1c3]"></a>get_curve</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_IsPrivateKeyValid
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init_curve
</UL>

<P><STRONG><a name="[1c5]"></a>ecc_init_curve</STRONG> (Thumb, 594 bytes, Stack size 24 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_curve
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_ecc_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_VerifySignature
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_GenerateSignature
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_GenerateSecretZ
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_Mutiply
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_GeneratePublicKey
</UL>

<P><STRONG><a name="[1c8]"></a>get_nibble_value</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_IsPrivateKeyValid
</UL>

<P><STRONG><a name="[1cf]"></a>ecc_strcmp</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_VerifySignature
</UL>

<P><STRONG><a name="[1cd]"></a>run_ecc_codec</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, crypto.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_VerifySignature
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_GenerateSignature
</UL>

<P><STRONG><a name="[82]"></a>prvLoggingTask</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, aws_logging_task_dynamic_buffers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvLoggingTask &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_logging_task_dynamic_buffers.o(.text)
</UL>
<P><STRONG><a name="[1de]"></a>prvTcpSocketHelper</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvTcpSocketHelper &rArr; SOCKETS_Socket &rArr; prvGetFreeSocket &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Socket
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownInvalidParams
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTrustedServerCertificate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Connect_InvalidParams
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnect_InvalidAddressLength
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Close
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSend_Invalid
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTriggerWrongRootCA
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingConnect
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
</UL>

<P><STRONG><a name="[1e0]"></a>prvSecureConnectHelper</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvSecureConnectHelper &rArr; SOCKETS_SetSockOpt &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelper
</UL>

<P><STRONG><a name="[1e5]"></a>prvNonSecureConnectHelper</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, aws_test_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelper
</UL>

<P><STRONG><a name="[1e2]"></a>prvAwsIotBrokerConnectHelper</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = prvAwsIotBrokerConnectHelper &rArr; SOCKETS_GetHostByName &rArr; ESP_WIFI_GetHostIP &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_GetHostByName
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelper
</UL>

<P><STRONG><a name="[1e4]"></a>prvConnectHelper</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = prvConnectHelper &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAwsIotBrokerConnectHelper
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonSecureConnectHelper
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSecureConnectHelper
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
</UL>

<P><STRONG><a name="[1e7]"></a>prvSetSockOptHelper</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvSetSockOptHelper &rArr; SOCKETS_SetSockOpt &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownInvalidParams
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTrustedServerCertificate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSend_Invalid
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTriggerWrongRootCA
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
</UL>

<P><STRONG><a name="[1e8]"></a>prvConnectHelperWithRetry</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOptHelper
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAwsIotBrokerConnectHelper
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonSecureConnectHelper
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSecureConnectHelper
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpSocketHelper
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_CloseWithoutReceiving
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownWithoutReceiving
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTrustedServerCertificate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvThreadSafeDifferentSocketsDifferentTasks
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOpt_InvalidParams
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Shutdown
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Close
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Recv_ByteByByte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSend_Invalid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecv_Invalid
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTwoSecureConnections
</UL>

<P><STRONG><a name="[1e9]"></a>prvSendHelper</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = prvSendHelper &rArr; SOCKETS_Send &rArr; TLS_Send &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Recv_ByteByByte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTwoSecureConnections
</UL>

<P><STRONG><a name="[1eb]"></a>prvRecvHelper</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = prvRecvHelper &rArr; SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Recv_ByteByByte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTwoSecureConnections
</UL>

<P><STRONG><a name="[1ed]"></a>prvShutdownHelper</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = prvShutdownHelper &rArr; SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Shutdown
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvThreadSafeDifferentSocketsDifferentTasks
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Close
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Recv_ByteByByte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTwoSecureConnections
</UL>

<P><STRONG><a name="[1ef]"></a>prvCloseHelper</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = prvCloseHelper &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSecureOptionsAfterConnect_
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_TCP
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Socket_InvalidInputParams
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_CloseWithoutReceiving
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownInvalidParams
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_ShutdownWithoutReceiving
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Recv_On_Unconnected_Socket
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Threadsafe_SameSocketDifferentTasks
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTrustedServerCertificate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvServerDomainName
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Connect_InvalidParams
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnect_InvalidAddressLength
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvThreadSafeDifferentSocketsDifferentTasks
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOpt_InvalidParams
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_Shutdown
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Close
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Recv_ByteByByte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSend_Invalid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecv_Invalid
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTriggerWrongRootCA
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTwoSecureConnections
</UL>

<P><STRONG><a name="[1f0]"></a>prvCreateTxData</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvCreateTxData &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Recv_ByteByByte
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
</UL>

<P><STRONG><a name="[1f1]"></a>prvCheckRxTxBuffers</STRONG> (Thumb, 664 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvCheckRxTxBuffers &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SendRecv_VaryLength
</UL>

<P><STRONG><a name="[1f2]"></a>prvCheckBufferUnmodified</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvCheckBufferUnmodified &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSOCKETS_Recv_ByteByByte
</UL>

<P><STRONG><a name="[1f3]"></a>prvCheckTimeout</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvCheckTimeout &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_SetSockOpt_RCVTIMEO
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSOCKETS_NonBlocking_Test
</UL>

<P><STRONG><a name="[1f8]"></a>prvTwoSecureConnections</STRONG> (Thumb, 1356 bytes, Stack size 40 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = prvTwoSecureConnections &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvShutdownHelper
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecvHelper
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_TwoSecureConnections_
</UL>

<P><STRONG><a name="[1fc]"></a>prvNonBlockingConnect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvNonBlockingConnect &rArr; SOCKETS_SetSockOpt &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpSocketHelper
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlockingConnect_
</UL>

<P><STRONG><a name="[1ff]"></a>prvTriggerWrongRootCA</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = prvTriggerWrongRootCA &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOptHelper
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpSocketHelper
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_GetHostByName
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SockEventHandler_
</UL>

<P><STRONG><a name="[202]"></a>prvRecv_Invalid</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = prvRecv_Invalid &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_Invalid_
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Recv_Invalid_
</UL>

<P><STRONG><a name="[205]"></a>prvSend_Invalid</STRONG> (Thumb, 1152 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = prvSend_Invalid &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOptHelper
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpSocketHelper
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Send_Invalid_
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Send_Invalid_
</UL>

<P><STRONG><a name="[208]"></a>prvSOCKETS_SendRecv_VaryLength</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = prvSOCKETS_SendRecv_VaryLength &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckRxTxBuffers
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateTxData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvShutdownHelper
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecvHelper
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SendRecv_VaryLength_
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_SendRecv_VaryLength_
</UL>

<P><STRONG><a name="[20b]"></a>prvTestSOCKETS_Recv_ByteByByte</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = prvTestSOCKETS_Recv_ByteByByte &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckBufferUnmodified
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateTxData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvShutdownHelper
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecvHelper
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_ByteByByte_
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Recv_ByteByByte_
</UL>

<P><STRONG><a name="[20e]"></a>prvTestSOCKETS_Close</STRONG> (Thumb, 978 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = prvTestSOCKETS_Close &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvShutdownHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpSocketHelper
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Close_
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Close_
</UL>

<P><STRONG><a name="[211]"></a>prvSOCKETS_Shutdown</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = prvSOCKETS_Shutdown &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Shutdown
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Shutdown_
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Shutdown_
</UL>

<P><STRONG><a name="[214]"></a>prvSetSockOpt_InvalidParams</STRONG> (Thumb, 478 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = prvSetSockOpt_InvalidParams &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_InvalidParams_
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_InvalidParams_
</UL>

<P><STRONG><a name="[217]"></a>prvSOCKETS_NonBlocking_Test</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = prvSOCKETS_NonBlocking_Test &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTimeout
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckRxTxBuffers
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateTxData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvShutdownHelper
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_NonBlocking_Test_
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_NonBlocking_Test_
</UL>

<P><STRONG><a name="[21a]"></a>prvSOCKETS_SetSockOpt_RCVTIMEO</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = prvSOCKETS_SetSockOpt_RCVTIMEO &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTimeout
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvShutdownHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_RCVTIMEO_
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_RCVTIMEO_
</UL>

<P><STRONG><a name="[85]"></a>prvThreadSafeDifferentSocketsDifferentTasks</STRONG> (Thumb, 802 bytes, Stack size 56 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = prvThreadSafeDifferentSocketsDifferentTasks &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvShutdownHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[221]"></a>prvConnect_InvalidAddressLength</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = prvConnect_InvalidAddressLength &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpSocketHelper
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidAddressLength_
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidAddressLength_
</UL>

<P><STRONG><a name="[224]"></a>prvSOCKETS_Connect_InvalidParams</STRONG> (Thumb, 854 bytes, Stack size 32 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = prvSOCKETS_Connect_InvalidParams &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpSocketHelper
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Connect_InvalidParams_
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Connect_InvalidParams_
</UL>

<P><STRONG><a name="[227]"></a>prvServerDomainName</STRONG> (Thumb, 408 bytes, Stack size 112 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = prvServerDomainName &rArr; prvConnectHelper &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOptHelper
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelper
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAwsIotBrokerConnectHelper
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpSocketHelper
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SERVER_NAME_INDICATION_
</UL>

<P><STRONG><a name="[22a]"></a>prvTrustedServerCertificate</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = prvTrustedServerCertificate &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOptHelper
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpSocketHelper
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_TRUSTED_SERVER_CERTIFICATE_
</UL>

<P><STRONG><a name="[86]"></a>prvEchoClientTxTask</STRONG> (Thumb, 678 bytes, Stack size 40 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = prvEchoClientTxTask &rArr; SOCKETS_Send &rArr; TLS_Send &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_test_tcp.o(.text)
</UL>
<P><STRONG><a name="[22d]"></a>prvSOCKETS_Threadsafe_SameSocketDifferentTasks</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = prvSOCKETS_Threadsafe_SameSocketDifferentTasks &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvShutdownHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertGreaterNumber
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualMemory
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Threadsafe_SameSocketDifferentTasks_
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Threadsafe_SameSocketDifferentTasks_
</UL>

<P><STRONG><a name="[232]"></a>prvSOCKETS_Recv_On_Unconnected_Socket</STRONG> (Thumb, 620 bytes, Stack size 32 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = prvSOCKETS_Recv_On_Unconnected_Socket &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvShutdownHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOptHelper
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpSocketHelper
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertGreaterNumber
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Recv_On_Unconnected_Socket_
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_On_Unconnected_Socket_
</UL>

<P><STRONG><a name="[235]"></a>prvSOCKETS_ShutdownWithoutReceiving</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = prvSOCKETS_ShutdownWithoutReceiving &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertGreaterNumber
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Shutdown
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_ShutdownWithoutReceiving_
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownWithoutReceiving_
</UL>

<P><STRONG><a name="[238]"></a>prvSOCKETS_ShutdownInvalidParams</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = prvSOCKETS_ShutdownInvalidParams &rArr; prvCloseHelper &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSockOptHelper
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpSocketHelper
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_ShutdownInvalidParams_
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_ShutdownInvalidParams_
</UL>

<P><STRONG><a name="[23b]"></a>prvSOCKETS_CloseWithoutReceiving</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = prvSOCKETS_CloseWithoutReceiving &rArr; prvConnectHelperWithRetry &rArr; SOCKETS_Connect &rArr; TLS_Connect &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvConnectHelperWithRetry
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertGreaterNumber
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_CloseWithoutReceiving_
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseWithoutReceiving_
</UL>

<P><STRONG><a name="[23e]"></a>prvSOCKETS_CloseInvalidParams</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = prvSOCKETS_CloseInvalidParams &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_CloseInvalidParams_
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_CloseInvalidParams_
</UL>

<P><STRONG><a name="[249]"></a>prvSOCKETS_Socket_InvalidInputParams</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = prvSOCKETS_Socket_InvalidInputParams &rArr; prvCloseHelper &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Socket
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidInputParams_
</UL>

<P><STRONG><a name="[24c]"></a>prvSOCKETS_Socket_InvalidTooManySockets</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = prvSOCKETS_Socket_InvalidTooManySockets &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Socket
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Socket_InvalidTooManySockets_
</UL>

<P><STRONG><a name="[25d]"></a>prvSOCKETS_Socket_TCP</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = prvSOCKETS_Socket_TCP &rArr; prvCloseHelper &rArr; SOCKETS_Close &rArr; TLS_Cleanup &rArr; prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCloseHelper
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Socket
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_Socket_TCP_
</UL>

<P><STRONG><a name="[273]"></a>prvSOCKETS_SetSockOpt_SNDTIMEO</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aws_test_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvSOCKETS_SetSockOpt_SNDTIMEO &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SECURE_SOCKETS_SetSockOpt_SNDTIMEO_
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_AFQP_SOCKETS_SetSockOpt_SNDTIMEO_
</UL>

<P><STRONG><a name="[27a]"></a>RunTests</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aws_test_runner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RunTests &rArr; TEST_Full_TCP_GROUP_RUNNER &rArr; TEST_Full_TCP_AFQP_SECURE_SOCKETS_Recv_ByteByByte_run &rArr; UnityTestRunner &rArr; UnityMalloc_EndTest &rArr; UnityFail &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Full_TCP_GROUP_RUNNER
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RUNNER_RunTests_task
</UL>

<P><STRONG><a name="[89]"></a>prvMQTTSendCallback</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = prvMQTTSendCallback &rArr; SOCKETS_Send &rArr; TLS_Send &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_mqtt_agent.o(.text)
</UL>
<P><STRONG><a name="[280]"></a>prvNotifyRequestingTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvNotifyRequestingTask &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTTask
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTPublish
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTUnSubscribe
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTSubscribe
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTDisconnect
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTConnect
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCONNACK
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedSUBACK
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedUNSUBACK
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPUBACK
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedTimeout
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedDisconnect
</UL>

<P><STRONG><a name="[281]"></a>prvGracefulSocketClose</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = prvGracefulSocketClose &rArr; SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Shutdown
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTConnect
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupConnection
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedDisconnect
</UL>

<P><STRONG><a name="[282]"></a>prvProcessReceivedDisconnect</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = prvProcessReceivedDisconnect &rArr; prvGracefulSocketClose &rArr; SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGracefulSocketClose
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTEventCallback
</UL>

<P><STRONG><a name="[284]"></a>prvRetrieveNotificationData</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvRetrieveNotificationData
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCONNACK
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedSUBACK
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedUNSUBACK
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPUBACK
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedTimeout
</UL>

<P><STRONG><a name="[283]"></a>prvProcessReceivedTimeout</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvProcessReceivedTimeout &rArr; prvNotifyRequestingTask &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRetrieveNotificationData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTEventCallback
</UL>

<P><STRONG><a name="[285]"></a>prvProcessReceivedPublish</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvProcessReceivedPublish &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTEventCallback
</UL>

<P><STRONG><a name="[286]"></a>prvProcessReceivedPUBACK</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvProcessReceivedPUBACK &rArr; prvNotifyRequestingTask &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRetrieveNotificationData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTEventCallback
</UL>

<P><STRONG><a name="[287]"></a>prvProcessReceivedUNSUBACK</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvProcessReceivedUNSUBACK &rArr; prvNotifyRequestingTask &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRetrieveNotificationData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTEventCallback
</UL>

<P><STRONG><a name="[288]"></a>prvProcessReceivedSUBACK</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvProcessReceivedSUBACK &rArr; prvNotifyRequestingTask &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRetrieveNotificationData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTEventCallback
</UL>

<P><STRONG><a name="[289]"></a>prvProcessReceivedCONNACK</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvProcessReceivedCONNACK &rArr; prvNotifyRequestingTask &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRetrieveNotificationData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTEventCallback
</UL>

<P><STRONG><a name="[88]"></a>prvMQTTEventCallback</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = prvMQTTEventCallback &rArr; prvProcessReceivedDisconnect &rArr; prvGracefulSocketClose &rArr; SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCONNACK
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedSUBACK
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedUNSUBACK
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPUBACK
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPublish
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedTimeout
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedDisconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_mqtt_agent.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>prvMQTTGetTicks</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvMQTTGetTicks &rArr; vTaskSetTimeOutState &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvManageConnections
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_mqtt_agent.o(.text)
</UL>
<P><STRONG><a name="[28a]"></a>prvGetFreeConnection</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, aws_mqtt_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Create
</UL>

<P><STRONG><a name="[28b]"></a>prvReturnConnection</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, aws_mqtt_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Delete
</UL>

<P><STRONG><a name="[293]"></a>prvStoreNotificationData</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvStoreNotificationData
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTPublish
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTUnSubscribe
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTSubscribe
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTConnect
</UL>

<P><STRONG><a name="[87]"></a>prvMQTTClientSocketWakeupCallback</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvMQTTClientSocketWakeupCallback &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_mqtt_agent.o(.text)
</UL>
<P><STRONG><a name="[28d]"></a>prvSetupConnection</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = prvSetupConnection &rArr; prvGracefulSocketClose &rArr; SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGracefulSocketClose
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Socket
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_GetHostByName
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTConnect
</UL>

<P><STRONG><a name="[28e]"></a>prvManageConnections</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = prvManageConnections &rArr; SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ParseReceivedData
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Periodic
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Disconnect
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTGetTicks
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTTask
</UL>

<P><STRONG><a name="[292]"></a>prvInitiateMQTTConnect</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = prvInitiateMQTTConnect &rArr; prvSetupConnection &rArr; prvGracefulSocketClose &rArr; SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupConnection
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreNotificationData
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGracefulSocketClose
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTTask
</UL>

<P><STRONG><a name="[295]"></a>prvInitiateMQTTDisconnect</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = prvInitiateMQTTDisconnect &rArr; MQTT_Disconnect &rArr; prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Disconnect
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTTask
</UL>

<P><STRONG><a name="[296]"></a>prvInitiateMQTTSubscribe</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = prvInitiateMQTTSubscribe &rArr; MQTT_Subscribe &rArr; prvStoreSubscription &rArr; prvRemoveSubscription &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreNotificationData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTTask
</UL>

<P><STRONG><a name="[298]"></a>prvInitiateMQTTUnSubscribe</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvInitiateMQTTUnSubscribe &rArr; MQTT_Unsubscribe &rArr; prvSendData &rArr; prvGetCurrentTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Unsubscribe
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreNotificationData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTTask
</UL>

<P><STRONG><a name="[29a]"></a>prvInitiateMQTTPublish</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvInitiateMQTTPublish &rArr; MQTT_Publish &rArr; prvSendData &rArr; prvGetCurrentTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreNotificationData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMQTTTask
</UL>

<P><STRONG><a name="[29c]"></a>prvSendCommandToMQTTTask</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, aws_mqtt_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Unsubscribe
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Subscribe
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Publish
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Disconnect
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_AGENT_Connect
</UL>

<P><STRONG><a name="[8d]"></a>prvMQTTTask</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, aws_mqtt_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = prvMQTTTask &rArr; prvInitiateMQTTConnect &rArr; prvSetupConnection &rArr; prvGracefulSocketClose &rArr; SOCKETS_Recv &rArr; TLS_Recv &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTPublish
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTUnSubscribe
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTSubscribe
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTDisconnect
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitiateMQTTConnect
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvManageConnections
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyRequestingTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_mqtt_agent.o(.text)
</UL>
<P><STRONG><a name="[2a6]"></a>prvGetFreeBuffer</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvGetFreeBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ParseReceivedData
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Unsubscribe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
</UL>

<P><STRONG><a name="[2a7]"></a>prvReturnBuffer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvReturnBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ParseReceivedData
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ReturnBuffer
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPublish
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCONNACK
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPUBACK
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedSUBACK
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedUNSUBACK
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Unsubscribe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Periodic
</UL>

<P><STRONG><a name="[2bc]"></a>prvPacketTypeFlagsGetTxBuffer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvPacketTypeFlagsGetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCONNACK
</UL>

<P><STRONG><a name="[2b7]"></a>prvPacketTypeFlagsIdentifierGetTxBuffer</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvPacketTypeFlagsIdentifierGetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedSUBACK
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedUNSUBACK
</UL>

<P><STRONG><a name="[2ba]"></a>prvPacketTypeIdentifierGetTxBuffer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvPacketTypeIdentifierGetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPUBACK
</UL>

<P><STRONG><a name="[2aa]"></a>prvResetRxMessageState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ParseReceivedData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
</UL>

<P><STRONG><a name="[2a9]"></a>prvResetMQTTContext</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvResetMQTTContext &rArr; prvReturnBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetRxMessageState
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_prvResetMQTTContext
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ParseReceivedData
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedMQTTPacket
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPublish
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCONNACK
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPUBACK
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedSUBACK
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedUNSUBACK
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedFixedHeaderOnlyMQTTPacket
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPINGRESP
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Periodic
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Disconnect
</UL>

<P><STRONG><a name="[2ac]"></a>prvGetCurrentTickCount</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvGetCurrentTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCONNACK
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPINGRESP
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendData
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Unsubscribe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Periodic
</UL>

<P><STRONG><a name="[2c5]"></a>prvIsTimeElapsed</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsTimeElapsed
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Periodic
</UL>

<P><STRONG><a name="[2ab]"></a>prvSendData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvSendData &rArr; prvGetCurrentTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetCurrentTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPublish
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Unsubscribe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Periodic
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Disconnect
</UL>

<P><STRONG><a name="[2af]"></a>prvDoesTopicMatchTopicFilter</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvDoesTopicMatchTopicFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_prvDoesTopicMatchTopicFilter
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeSubscriptionCallbacks
</UL>

<P><STRONG><a name="[2ad]"></a>prvInvokeSubscriptionCallbacks</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDoesTopicMatchTopicFilter
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeCallback
</UL>

<P><STRONG><a name="[2b0]"></a>prvInvokeCallback</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeSubscriptionCallbacks
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ParseReceivedData
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedMQTTPacket
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPublish
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCONNACK
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPUBACK
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedSUBACK
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedUNSUBACK
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedFixedHeaderOnlyMQTTPacket
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPINGRESP
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Periodic
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Disconnect
</UL>

<P><STRONG><a name="[2b1]"></a>prvProcessReceivedPINGRESP</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = prvProcessReceivedPINGRESP &rArr; prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeCallback
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetCurrentTickCount
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedFixedHeaderOnlyMQTTPacket
</UL>

<P><STRONG><a name="[2b2]"></a>prvProcessReceivedFixedHeaderOnlyMQTTPacket</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = prvProcessReceivedFixedHeaderOnlyMQTTPacket &rArr; prvProcessReceivedPINGRESP &rArr; prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPINGRESP
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeCallback
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ParseReceivedData
</UL>

<P><STRONG><a name="[2b3]"></a>prvRemoveSubscription</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvRemoveSubscription &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreSubscription
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRemoveSubscriptionForSubscribeOrUnsubscribeBuffer
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
</UL>

<P><STRONG><a name="[2b5]"></a>prvDecodeRemainingLength</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvDecodeRemainingLength
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ParseReceivedData
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRemoveSubscriptionForSubscribeOrUnsubscribeBuffer
</UL>

<P><STRONG><a name="[2b4]"></a>prvRemoveSubscriptionForSubscribeOrUnsubscribeBuffer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = prvRemoveSubscriptionForSubscribeOrUnsubscribeBuffer &rArr; prvRemoveSubscription &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDecodeRemainingLength
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRemoveSubscription
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedSUBACK
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedUNSUBACK
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Periodic
</UL>

<P><STRONG><a name="[2b6]"></a>prvProcessReceivedUNSUBACK</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = prvProcessReceivedUNSUBACK &rArr; prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRemoveSubscriptionForSubscribeOrUnsubscribeBuffer
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeCallback
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPacketTypeFlagsIdentifierGetTxBuffer
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedMQTTPacket
</UL>

<P><STRONG><a name="[2b8]"></a>prvProcessReceivedSUBACK</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = prvProcessReceivedSUBACK &rArr; prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRemoveSubscriptionForSubscribeOrUnsubscribeBuffer
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeCallback
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPacketTypeFlagsIdentifierGetTxBuffer
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedMQTTPacket
</UL>

<P><STRONG><a name="[2b9]"></a>prvProcessReceivedPUBACK</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = prvProcessReceivedPUBACK &rArr; prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeCallback
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPacketTypeIdentifierGetTxBuffer
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedMQTTPacket
</UL>

<P><STRONG><a name="[2bb]"></a>prvProcessReceivedCONNACK</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = prvProcessReceivedCONNACK &rArr; prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeCallback
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetCurrentTickCount
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPacketTypeFlagsGetTxBuffer
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedMQTTPacket
</UL>

<P><STRONG><a name="[2bd]"></a>prvProcessReceivedPublish</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = prvProcessReceivedPublish &rArr; prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeCallback
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendData
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReturnBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedMQTTPacket
</UL>

<P><STRONG><a name="[2be]"></a>prvProcessReceivedMQTTPacket</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = prvProcessReceivedMQTTPacket &rArr; prvProcessReceivedCONNACK &rArr; prvInvokeCallback &rArr; prvInvokeSubscriptionCallbacks &rArr; prvDoesTopicMatchTopicFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPublish
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCONNACK
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedPUBACK
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedSUBACK
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedUNSUBACK
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInvokeCallback
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetMQTTContext
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ParseReceivedData
</UL>

<P><STRONG><a name="[2bf]"></a>prvWriteString</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvWriteString &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Unsubscribe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
</UL>

<P><STRONG><a name="[2c0]"></a>prvSizeOfRemainingLength</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvSizeOfRemainingLength
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Unsubscribe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
</UL>

<P><STRONG><a name="[2c1]"></a>prvEncodeRemainingLength</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvEncodeRemainingLength
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Unsubscribe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
</UL>

<P><STRONG><a name="[2c3]"></a>prvGetTopicFilterType</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetTopicFilterType
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_prvGetTopicFilterType
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreSubscription
</UL>

<P><STRONG><a name="[2c2]"></a>prvStoreSubscription</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, aws_mqtt_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = prvStoreSubscription &rArr; prvRemoveSubscription &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetTopicFilterType
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRemoveSubscription
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Subscribe
</UL>

<P><STRONG><a name="[8f]"></a>prvCalloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, aws_crypto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_crypto.o(.text)
</UL>
<P><STRONG><a name="[2c9]"></a>prvVerifySignature</STRONG> (Thumb, 112 bytes, Stack size 360 bytes, aws_crypto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPTO_SignatureVerificationFinal
</UL>

<P><STRONG><a name="[2f6]"></a>prvFLASH_update</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, aws_pkcs11_pal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKCS11_PAL_SaveFile
</UL>

<P><STRONG><a name="[32a]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>

<P><STRONG><a name="[334]"></a>mbedtls_clz</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>

<P><STRONG><a name="[342]"></a>mpi_get_digit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[339]"></a>mpi_sub_hlp</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>

<P><STRONG><a name="[33f]"></a>mpi_mul_hlp</STRONG> (Thumb, 1584 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>

<P><STRONG><a name="[347]"></a>mbedtls_int_div_int</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_int_div_int &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[34b]"></a>mpi_write_hlp</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_int
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_int
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
</UL>

<P><STRONG><a name="[352]"></a>mpi_montg_init</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_montg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[34f]"></a>mpi_montmul</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[350]"></a>mpi_montred</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[357]"></a>mpi_check_small_factors</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mpi_check_small_factors &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_int
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
</UL>

<P><STRONG><a name="[358]"></a>mpi_miller_rabin</STRONG> (Thumb, 582 bytes, Stack size 112 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gen_prime
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime
</UL>

<P><STRONG><a name="[36b]"></a>mbedtls_constant_time_memcmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_check_tag
</UL>

<P><STRONG><a name="[9a]"></a>get_no_padding</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cipher.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>get_zeros_padding</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>add_zeros_padding</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>get_zeros_and_len_padding</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>add_zeros_and_len_padding</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_zeros_and_len_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>get_one_and_zeros_padding</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>add_one_and_zeros_padding</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_one_and_zeros_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>get_pkcs_padding</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>add_pkcs_padding</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_pkcs_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[365]"></a>mbedtls_cipher_get_block_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>

<P><STRONG><a name="[bc]"></a>gcm_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gcm_ctx_alloc &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>gcm_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gcm_ctx_free &rArr; mbedtls_gcm_free &rArr; mbedtls_cipher_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>aes_crypt_cbc_wrap</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = aes_crypt_cbc_wrap &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>aes_crypt_cfb128_wrap</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = aes_crypt_cfb128_wrap &rArr; mbedtls_aes_crypt_cfb128 &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cfb128
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>aes_crypt_ctr_wrap</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = aes_crypt_ctr_wrap &rArr; mbedtls_aes_crypt_ctr &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ctr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>aes_ctx_alloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aes_ctx_alloc &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>aes_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aes_ctx_free &rArr; mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>gcm_aes_setkey_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gcm_aes_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[375]"></a>ctr_drbg_update_internal</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ctr_drbg_update_internal &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_update
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
</UL>

<P><STRONG><a name="[376]"></a>block_cipher_df</STRONG> (Thumb, 368 bytes, Stack size 848 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_update
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
</UL>

<P><STRONG><a name="[9b]"></a>ctr_drbg_self_test_entropy</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ctr_drbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ctr_drbg_self_test_entropy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctr_drbg.o(.text)
</UL>
<P><STRONG><a name="[394]"></a>derive_mpi</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = derive_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_verify
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_sign
</UL>

<P><STRONG><a name="[398]"></a>ecdsa_signature_to_asn1</STRONG> (Thumb, 154 bytes, Stack size 176 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ecdsa_signature_to_asn1 &rArr; mbedtls_asn1_write_mpi &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>

<P><STRONG><a name="[3bb]"></a>ecp_get_type</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ecp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[3ae]"></a>ecp_modp</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_check_pubkey_sw
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
</UL>

<P><STRONG><a name="[3af]"></a>ecp_normalize_jac</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[3b0]"></a>ecp_normalize_jac_many</STRONG> (Thumb, 774 bytes, Stack size 64 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
</UL>

<P><STRONG><a name="[3b1]"></a>ecp_safe_invert_jac</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
</UL>

<P><STRONG><a name="[3b2]"></a>ecp_double_jac</STRONG> (Thumb, 1532 bytes, Stack size 72 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[3b3]"></a>ecp_add_mixed</STRONG> (Thumb, 1378 bytes, Stack size 112 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ecp_add_mixed &rArr; ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[3b4]"></a>ecp_randomize_jac</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ecp_randomize_jac &rArr; mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[3b5]"></a>ecp_comb_fixed</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecp_comb_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[3b6]"></a>ecp_precompute_comb</STRONG> (Thumb, 294 bytes, Stack size 176 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac_many
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[3b7]"></a>ecp_select_comb</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ecp_select_comb &rArr; ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
</UL>

<P><STRONG><a name="[3b8]"></a>ecp_mul_comb_core</STRONG> (Thumb, 202 bytes, Stack size 96 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ecp_mul_comb_core &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb
</UL>

<P><STRONG><a name="[3b9]"></a>ecp_mul_comb</STRONG> (Thumb, 472 bytes, Stack size 368 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mul_comb_core
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_precompute_comb
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_comb_fixed
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>

<P><STRONG><a name="[3ba]"></a>ecp_check_pubkey_sw</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_modp
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[3bd]"></a>mbedtls_ecp_mul_shortcuts</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ecp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[3c1]"></a>ecp_group_load</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecp_group_load &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mpi_load
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>

<P><STRONG><a name="[3c4]"></a>sub32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub32
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[3c3]"></a>add32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add32
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[9c]"></a>ecp_mod_p256</STRONG> (Thumb, 1232 bytes, Stack size 96 bytes, ecp_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecp_mod_p256 &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add32
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub32
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text)
</UL>
<P><STRONG><a name="[3c2]"></a>ecp_mpi_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecp_curves.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_group_load
</UL>

<P><STRONG><a name="[3c6]"></a>entropy_update</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = entropy_update &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_update_manual
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</UL>

<P><STRONG><a name="[3c9]"></a>entropy_gather_internal</STRONG> (Thumb, 172 bytes, Stack size 152 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_gather
</UL>

<P><STRONG><a name="[9e]"></a>entropy_dummy_source</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, entropy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = entropy_dummy_source
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entropy.o(.text)
</UL>
<P><STRONG><a name="[3cb]"></a>mbedtls_entropy_source_self_test_gather</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hardware_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
</UL>

<P><STRONG><a name="[3cd]"></a>mbedtls_entropy_source_self_test_check_bits</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, entropy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_source_self_test
</UL>

<P><STRONG><a name="[3cf]"></a>gcm_gen_table</STRONG> (Thumb, 404 bytes, Stack size 80 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gcm_gen_table &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[3d2]"></a>gcm_mult</STRONG> (Thumb, 448 bytes, Stack size 44 bytes, gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[be]"></a>sha1_starts_wrap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>sha1_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>sha1_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>sha1_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha1_ctx_alloc &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>sha1_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>sha1_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sha1_ctx_free &rArr; mbedtls_sha1_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>sha1_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>sha224_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>sha224_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>sha224_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>sha224_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>sha224_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha224_ctx_alloc &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>sha224_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sha224_ctx_free &rArr; mbedtls_sha256_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>sha224_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>sha224_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>sha256_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha256_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>sha256_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[3e2]"></a>oid_x520_attr_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
</UL>

<P><STRONG><a name="[3e4]"></a>oid_x509_ext_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
</UL>

<P><STRONG><a name="[3e6]"></a>oid_ext_key_usage_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
</UL>

<P><STRONG><a name="[3e8]"></a>oid_sig_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
</UL>

<P><STRONG><a name="[3eb]"></a>oid_pk_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>

<P><STRONG><a name="[3ed]"></a>oid_grp_id_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_grp_id_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
</UL>

<P><STRONG><a name="[3ef]"></a>oid_cipher_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_cipher_alg
</UL>

<P><STRONG><a name="[3f1]"></a>oid_md_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
</UL>

<P><STRONG><a name="[3f3]"></a>oid_md_hmac_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_hmac
</UL>

<P><STRONG><a name="[3f9]"></a>pk_hashlen_helper</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
</UL>

<P><STRONG><a name="[d1]"></a>rsa_can_do</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>rsa_get_bitlen</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rsa_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>rsa_verify_wrap</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>rsa_sign_wrap</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>rsa_check_pair_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>rsa_alloc_wrap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alloc_wrap &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>rsa_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>rsa_debug</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>eckey_can_do</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>eckey_get_bitlen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>ecdsa_verify_wrap</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_read_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_verify_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>eckey_verify_wrap</STRONG> (Thumb, 70 bytes, Stack size 216 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = eckey_verify_wrap &rArr; ecdsa_verify_wrap &rArr; mbedtls_ecdsa_read_signature &rArr; mbedtls_ecdsa_verify &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_verify_wrap
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>ecdsa_sign_wrap</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_write_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eckey_sign_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>eckey_sign_wrap</STRONG> (Thumb, 72 bytes, Stack size 232 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = eckey_sign_wrap &rArr; ecdsa_sign_wrap &rArr; mbedtls_ecdsa_write_signature &rArr; mbedtls_ecdsa_sign &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsa_sign_wrap
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_from_keypair
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>eckey_check_pair</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = eckey_check_pair &rArr; mbedtls_ecp_check_pub_priv &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>eckey_alloc_wrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eckey_alloc_wrap &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>eckey_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eckey_free_wrap &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>eckey_debug</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>eckeydh_can_do</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>ecdsa_can_do</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>ecdsa_alloc_wrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecdsa_alloc_wrap &rArr; mbedtls_ecdsa_init &rArr; mbedtls_ecp_keypair_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>ecdsa_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ecdsa_free_wrap &rArr; mbedtls_ecdsa_free &rArr; mbedtls_ecp_keypair_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>rsa_alt_can_do</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>rsa_alt_get_bitlen</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rsa_alt_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>rsa_alt_sign_wrap</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rsa_alt_sign_wrap
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_check_pair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>rsa_alt_decrypt_wrap</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rsa_alt_decrypt_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>rsa_alt_check_pair</STRONG> (Thumb, 150 bytes, Stack size 328 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = rsa_alt_check_pair &rArr; rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_sign_wrap
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alt_get_bitlen
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_get_bitlen
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>rsa_alt_alloc_wrap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alt_alloc_wrap &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>rsa_alt_free_wrap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rsa_alt_free_wrap &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[405]"></a>pk_get_ecparams</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pk_get_ecparams &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[406]"></a>pk_use_ecparams</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pk_use_ecparams &rArr; mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_ec_grp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[407]"></a>pk_get_ecpubkey</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = pk_get_ecpubkey &rArr; mbedtls_ecp_check_pubkey &rArr; ecp_check_pubkey_sw &rArr; ecp_modp &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
</UL>

<P><STRONG><a name="[408]"></a>pk_get_rsapubkey</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[40c]"></a>pk_get_pk_alg</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[40e]"></a>pk_parse_key_pkcs1_der</STRONG> (Thumb, 496 bytes, Stack size 80 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[40f]"></a>pk_parse_key_sec1_der</STRONG> (Thumb, 414 bytes, Stack size 64 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecpubkey
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_ecparams
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_keypair_free
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[410]"></a>pk_parse_key_pkcs8_unencrypted_der</STRONG> (Thumb, 304 bytes, Stack size 72 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_sec1_der
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_use_ecparams
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[412]"></a>pk_write_rsa_pubkey</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, pkwrite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_mpi
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_tag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_len
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_export
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
</UL>

<P><STRONG><a name="[414]"></a>pk_write_ec_pubkey</STRONG> (Thumb, 90 bytes, Stack size 168 bytes, pkwrite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pk_write_ec_pubkey &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey
</UL>

<P><STRONG><a name="[415]"></a>pk_write_ec_param</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pkwrite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pk_write_ec_param &rArr; mbedtls_asn1_write_oid &rArr; mbedtls_asn1_write_raw_buffer &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_write_oid
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_ec_grp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_key_der
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_write_pubkey_der
</UL>

<P><STRONG><a name="[42f]"></a>mbedtls_safer_memcmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[41c]"></a>rsa_check_context</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rsa_check_context &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[428]"></a>rsa_prepare_blinding</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[42c]"></a>rsa_rsassa_pkcs1_v15_encode</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rsa_rsassa_pkcs1_v15_encode &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[9f]"></a>myrand</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = myrand
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rsa.o(.text)
</UL>
<P><STRONG><a name="[464]"></a>mbedtls_ssl_own_key</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ssl_cli.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[43b]"></a>ssl_write_hostname_ext</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_write_hostname_ext &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[43c]"></a>ssl_write_signature_algorithms_ext</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_write_signature_algorithms_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[43e]"></a>ssl_write_supported_elliptic_curves_ext</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ssl_write_supported_elliptic_curves_ext &rArr; mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[445]"></a>ssl_write_supported_point_formats_ext</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssl_write_supported_point_formats_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[446]"></a>ssl_write_max_fragment_length_ext</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssl_write_max_fragment_length_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[447]"></a>ssl_write_encrypt_then_mac_ext</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssl_write_encrypt_then_mac_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[448]"></a>ssl_write_extended_ms_ext</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssl_write_extended_ms_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[43f]"></a>ssl_write_alpn_ext</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_write_alpn_ext &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[442]"></a>ssl_generate_random</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_generate_random
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[443]"></a>ssl_validate_ciphersuite</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_validate_ciphersuite
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[440]"></a>ssl_write_client_hello</STRONG> (Thumb, 610 bytes, Stack size 56 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ssl_write_client_hello &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_validate_ciphersuite
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_alpn_ext
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_extended_ms_ext
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypt_then_mac_ext
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_max_fragment_length_ext
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_point_formats_ext
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_supported_elliptic_curves_ext
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_hostname_ext
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_uses_ec
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[44a]"></a>ssl_parse_renegotiation_info</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ssl_parse_renegotiation_info &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[44c]"></a>ssl_parse_max_fragment_length_ext</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ssl_parse_max_fragment_length_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[44d]"></a>ssl_parse_encrypt_then_mac_ext</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ssl_parse_encrypt_then_mac_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[44e]"></a>ssl_parse_extended_ms_ext</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ssl_parse_extended_ms_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[44f]"></a>ssl_parse_supported_point_formats_ext</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ssl_parse_supported_point_formats_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[450]"></a>ssl_parse_alpn_ext</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ssl_parse_alpn_ext &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[451]"></a>ssl_parse_server_hello</STRONG> (Thumb, 1106 bytes, Stack size 56 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ssl_parse_server_hello &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_alpn_ext
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_supported_point_formats_ext
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_extended_ms_ext
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_encrypt_then_mac_ext
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_max_fragment_length_ext
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_validate_ciphersuite
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[456]"></a>ssl_check_server_ecdh_params</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ssl_check_server_ecdh_params &rArr; mbedtls_ecp_curve_info_from_grp_id
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_curve
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
</UL>

<P><STRONG><a name="[458]"></a>ssl_parse_server_ecdh_params</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ssl_parse_server_ecdh_params &rArr; mbedtls_ecdh_read_params &rArr; mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_read_params
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_server_ecdh_params
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[459]"></a>ssl_parse_signature_algorithm</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ssl_parse_signature_algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_pk_alg_from_sig
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_md_alg_from_hash
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_sig_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
</UL>

<P><STRONG><a name="[45d]"></a>ssl_parse_server_key_exchange</STRONG> (Thumb, 578 bytes, Stack size 120 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ssl_parse_server_key_exchange &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_key_exchange_md_tls1_2
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_signature_algorithm
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_ecdh_params
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_sig_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[460]"></a>ssl_parse_certificate_request</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ssl_parse_certificate_request &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[461]"></a>ssl_parse_server_hello_done</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ssl_parse_server_hello_done &rArr; mbedtls_ssl_read_record &rArr; ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[462]"></a>ssl_write_client_key_exchange</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = ssl_write_client_key_exchange &rArr; mbedtls_ecdh_make_public &rArr; mbedtls_ecdh_gen_public &rArr; mbedtls_ecp_gen_keypair &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_calc_secret
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_make_public
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[463]"></a>ssl_write_certificate_verify</STRONG> (Thumb, 398 bytes, Stack size 104 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[478]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 54 bytes, Stack size 28 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
</UL>

<P><STRONG><a name="[49c]"></a>ssl_set_timer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer_cb
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[47c]"></a>ssl_check_timer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_check_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
</UL>

<P><STRONG><a name="[4a6]"></a>ssl_mfl_code_to_length</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_frag_len
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_max_frag_len
</UL>

<P><STRONG><a name="[470]"></a>ssl_session_copy</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_session
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_session
</UL>

<P><STRONG><a name="[472]"></a>tls_prf_generic</STRONG> (Thumb, 278 bytes, Stack size 232 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
</UL>

<P><STRONG><a name="[a0]"></a>tls_prf_sha256</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>ssl_calc_finished_tls_sha256</STRONG> (Thumb, 118 bytes, Stack size 184 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ssl_calc_finished_tls_sha256 &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>ssl_calc_verify_tls_sha256</STRONG> (Thumb, 56 bytes, Stack size 120 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ssl_calc_verify_tls_sha256 &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[479]"></a>ssl_read_memory</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_read_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[475]"></a>ssl_encrypt_buf</STRONG> (Thumb, 964 bytes, Stack size 104 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[477]"></a>ssl_decrypt_buf</STRONG> (Thumb, 1474 bytes, Stack size 120 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_process
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_read_memory
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
</UL>

<P><STRONG><a name="[47d]"></a>ssl_update_out_pointers</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_in_out_pointers
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>

<P><STRONG><a name="[480]"></a>ssl_get_hs_total_len</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
</UL>

<P><STRONG><a name="[481]"></a>ssl_parse_record_header</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
</UL>

<P><STRONG><a name="[482]"></a>ssl_prepare_record_content</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_next_record
</UL>

<P><STRONG><a name="[484]"></a>ssl_get_next_record</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ssl_get_next_record &rArr; ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[487]"></a>ssl_record_is_in_progress</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[485]"></a>ssl_consume_current_message</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ssl_consume_current_message &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[48e]"></a>ssl_update_in_pointers</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_in_out_pointers
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
</UL>

<P><STRONG><a name="[a3]"></a>ssl_update_checksum_sha256</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ssl_update_checksum_sha256 &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>ssl_update_checksum_start</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[492]"></a>ssl_handshake_wrapup_free_hs_transform</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[493]"></a>ssl_handshake_params_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_handshake_params_init &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_hash_set_const_hash
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[495]"></a>ssl_transform_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_transform_init &rArr; mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[497]"></a>ssl_handshake_init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ssl_handshake_init &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[499]"></a>ssl_reset_in_out_pointers</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_reset_in_out_pointers
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_in_pointers
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_out_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[49b]"></a>ssl_session_reset_int</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_reset_in_out_pointers
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset
</UL>

<P><STRONG><a name="[4a0]"></a>ssl_append_key_cert</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_append_key_cert &rArr; mbedtls_calloc
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hs_own_cert
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
</UL>

<P><STRONG><a name="[4af]"></a>ssl_write_real</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ssl_write_real &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_out_record_payload
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[4b2]"></a>ssl_key_cert_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ssl_key_cert_free &rArr; mbedtls_free
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
</UL>

<P><STRONG><a name="[476]"></a>mbedtls_cipher_get_cipher_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[19]"></a>threading_mutex_fail</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, threading.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> threading.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>threading_mutex_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, threading.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> threading.o(.data)
</UL>
<P><STRONG><a name="[4bf]"></a>x509_get_attr_type_value</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
</UL>

<P><STRONG><a name="[4c2]"></a>x509_parse_int</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[4c3]"></a>x509_date_is_valid</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = x509_date_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_time
</UL>

<P><STRONG><a name="[4c1]"></a>x509_parse_time</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = x509_parse_time &rArr; x509_date_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_date_is_valid
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>

<P><STRONG><a name="[4ec]"></a>x509_profile_check_md_alg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_profile_check_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
</UL>

<P><STRONG><a name="[4ed]"></a>x509_profile_check_pk_alg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_profile_check_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[4cc]"></a>x509_profile_check_key</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = x509_profile_check_key &rArr; mbedtls_pk_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[4ce]"></a>x509_get_version</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_get_version &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4cf]"></a>x509_get_dates</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = x509_get_dates &rArr; mbedtls_x509_get_time &rArr; x509_parse_time &rArr; x509_date_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4d0]"></a>x509_get_uid</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_uid &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4d1]"></a>x509_get_basic_constraints</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[4d2]"></a>x509_get_ns_cert_type</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = x509_get_ns_cert_type &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[4d3]"></a>x509_get_key_usage</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = x509_get_key_usage &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[4d4]"></a>x509_get_ext_key_usage</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_ext_key_usage &rArr; mbedtls_asn1_get_sequence_of &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[4d5]"></a>x509_get_subject_alt_name</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_get_subject_alt_name &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[4d6]"></a>x509_get_crt_ext</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = x509_get_crt_ext &rArr; x509_get_key_usage &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[4d7]"></a>x509_crt_parse_der_core</STRONG> (Thumb, 816 bytes, Stack size 80 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[4dd]"></a>x509_info_subject_alt_name</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[4d8]"></a>x509_info_cert_type</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[4d9]"></a>x509_info_key_usage</STRONG> (Thumb, 650 bytes, Stack size 32 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[4da]"></a>x509_info_ext_key_usage</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[4e0]"></a>x509_memcasecmp</STRONG> (Thumb, 360 bytes, Stack size 20 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_cn
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
</UL>

<P><STRONG><a name="[4df]"></a>x509_check_wildcard</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_cn
</UL>

<P><STRONG><a name="[4e1]"></a>x509_string_cmp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
</UL>

<P><STRONG><a name="[4e2]"></a>x509_name_cmp</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_ee_locally_trusted
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
</UL>

<P><STRONG><a name="[4e3]"></a>x509_crt_check_signature</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = x509_crt_check_signature &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[4e5]"></a>x509_crt_check_parent</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_crt_check_parent &rArr; x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_check_key_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>

<P><STRONG><a name="[4e6]"></a>x509_crt_find_parent_in</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = x509_crt_find_parent_in &rArr; x509_crt_check_signature &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_signature
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent
</UL>

<P><STRONG><a name="[4e9]"></a>x509_crt_find_parent</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = x509_crt_find_parent &rArr; x509_crt_find_parent_in &rArr; x509_crt_check_signature &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent_in
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
</UL>

<P><STRONG><a name="[4ea]"></a>x509_crt_check_ee_locally_trusted</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = x509_crt_check_ee_locally_trusted &rArr; x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_chain
</UL>

<P><STRONG><a name="[4eb]"></a>x509_crt_verify_chain</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = x509_crt_verify_chain &rArr; x509_crt_find_parent &rArr; x509_crt_find_parent_in &rArr; x509_crt_check_signature &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_ee_locally_trusted
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_find_parent
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_signature
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[4ee]"></a>x509_crt_check_cn</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_crt_check_cn &rArr; x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_name
</UL>

<P><STRONG><a name="[4ef]"></a>x509_crt_verify_name</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = x509_crt_verify_name &rArr; x509_crt_check_cn &rArr; x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_cn
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[4f0]"></a>x509_crt_merge_flags_with_cb</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = x509_crt_merge_flags_with_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[4f2]"></a>prvFreeContext</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, aws_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = prvFreeContext &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Cleanup
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Send
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Recv
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[a9]"></a>prvNetworkSend</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, aws_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvNetworkSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_tls.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>prvNetworkRecv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, aws_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvNetworkRecv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_tls.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>prvGenerateRandomBytes</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aws_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvGenerateRandomBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_tls.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>prvCheckCertificate</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, aws_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = prvCheckCertificate &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_tls.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>prvPrivateKeySigningCallback</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, aws_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = prvPrivateKeySigningCallback &rArr; C_SignInit &rArr; mbedtls_pk_parse_key &rArr; pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_sec1_der &rArr; mbedtls_ecp_mul &rArr; ecp_mul_comb &rArr; ecp_precompute_comb &rArr; ecp_normalize_jac_many &rArr; ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoggingPrintf
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_Sign
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_SignInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_tls.o(.text)
</UL>
<P><STRONG><a name="[4f4]"></a>prvInitializeClientCredential</STRONG> (Thumb, 506 bytes, Stack size 56 bytes, aws_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = prvInitializeClientCredential &rArr; mbedtls_x509_crt_parse &rArr; mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mbedtls_mpi_zeroize &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_Connect
</UL>

<P><STRONG><a name="[50f]"></a>prvGetFreeSocket</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvGetFreeSocket &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Socket
</UL>

<P><STRONG><a name="[510]"></a>prvReturnSocket</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvReturnSocket &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>

<P><STRONG><a name="[511]"></a>prvIsValidSocket</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvIsValidSocket &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Shutdown
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_SetSockOpt
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Connect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Close
</UL>

<P><STRONG><a name="[ab]"></a>prvNetworkSend</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = prvNetworkSend &rArr; ESP_WIFI_Send &rArr; ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Send
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Get_Ipd_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_secure_sockets.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>prvNetworkRecv</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, aws_secure_sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = prvNetworkRecv &rArr; ESP_WIFI_Recv &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKETS_Recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aws_secure_sockets.o(.text)
</UL>
<P><STRONG><a name="[519]"></a>ParseIpAddr</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ParseIpAddr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetHostIP
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ParseAddress
</UL>

<P><STRONG><a name="[51c]"></a>ParseMacAddr</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ParseMacAddr &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ParseAddress
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseApDetail
</UL>

<P><STRONG><a name="[51e]"></a>ParseApDetail</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, esp8266_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMacAddr
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ParseAccessPoint
</UL>

<P><STRONG><a name="[520]"></a>AT_ParseAddress</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AT_ParseAddress &rArr; ParseIpAddr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMacAddr
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseIpAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetNetStatus
</UL>

<P><STRONG><a name="[521]"></a>AT_ParseAccessPoint</STRONG> (Thumb, 124 bytes, Stack size 104 bytes, esp8266_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseApDetail
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Scan
</UL>

<P><STRONG><a name="[52c]"></a>ESP_AT_Command</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, esp8266_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ESP_AT_Command &rArr; ESP_IO_Recv &rArr; vLoggingPrintf &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Recv
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_IO_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Scan
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Reset
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Ping
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetNetStatus
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetHostIP
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Disconnect
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Connect
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_SetMultiConn
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_StopClient
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_StartClient
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_Send
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_WIFI_GetConnStatus
</UL>

<P><STRONG><a name="[53a]"></a>UnityTestResultsBegin</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumber
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIgnore
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityConcludeTest
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>

<P><STRONG><a name="[53b]"></a>UnityTestResultsFailBegin</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UnityTestResultsFailBegin &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualString
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertGreaterNumber
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualIntArray
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualMemory
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualStringArray
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualStringLen
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertNumbersWithin
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatSpecial
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatsWithin
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualFloatArray
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertBits
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIsOneArrayNull
</UL>

<P><STRONG><a name="[53d]"></a>UnityAddMsgIfSpecified</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UnityAddMsgIfSpecified &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualString
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertGreaterNumber
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertSmallerNumber
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualIntArray
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualMemory
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualStringArray
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualStringLen
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertNumbersWithin
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatSpecial
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatsWithin
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualFloatArray
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertBits
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIsOneArrayNull
</UL>

<P><STRONG><a name="[53e]"></a>UnityPrintExpectedAndActualStrings</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualString
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualStringArray
</UL>

<P><STRONG><a name="[53f]"></a>UnityPrintExpectedAndActualStringsLen</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintLen
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualStringLen
</UL>

<P><STRONG><a name="[540]"></a>UnityIsOneArrayNull</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, unity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UnityIsOneArrayNull &rArr; UnityTestResultsFailBegin &rArr; UnityTestResultsBegin &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; putc &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualIntArray
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualMemory
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualStringArray
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualFloatArray
</UL>

<P><STRONG><a name="[543]"></a>UnityFloatsWithin</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, unity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatsWithin
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualFloatArray
</UL>

<P><STRONG><a name="[539]"></a>__ARM_isinff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, unity.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatSpecial
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintFloat
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFloatsWithin
</UL>

<P><STRONG><a name="[538]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, unity.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertFloatSpecial
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintFloat
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFloatsWithin
</UL>

<P><STRONG><a name="[54f]"></a>announceTestRun</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberUnsigned
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityMain
</UL>

<P><STRONG><a name="[552]"></a>selected</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, unity_fixture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = selected &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;groupSelected
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testSelected
</UL>

<P><STRONG><a name="[553]"></a>testSelected</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, unity_fixture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = testSelected &rArr; selected &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selected
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIgnoreTest
</UL>

<P><STRONG><a name="[554]"></a>groupSelected</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, unity_fixture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = groupSelected &rArr; selected &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selected
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestRunner
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityIgnoreTest
</UL>

<P><STRONG><a name="[55d]"></a>isOverrun</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_realloc
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_free
</UL>

<P><STRONG><a name="[55e]"></a>release_memory</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, unity_fixture.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_realloc
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unity_free
</UL>

<P><STRONG><a name="[57c]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[578]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[57f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[57e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b1]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[b2]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[ae]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
